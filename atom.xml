<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[ 개발새발 ]]></title><link href="http://dogfeet.github.com/atom.xml" rel="self" /><link href="http://dogfeet.github.com" /><updated>2013-02-21T14:19:05.062Z</updated><id>http://dogfeet.github.com</id><author><name>Changwoo Park</name><email>pismute@gmail.com</email></author><author><name>Sean Lee</name><email>sean@weaveus.com</email></author><author><name>Yongjae Choi</name><email>mage@weaveus.com</email></author><entry><title><![CDATA[ grunt: node-coffee 템플릿 ]]></title><link href="http://dogfeet.github.com/articles/2013/grunt-init-node-coffee.html" /><updated>2013-02-20T15:00:00.000Z</updated><id>http://dogfeet.github.com/articles/2013/grunt-init-node-coffee.html</id><content type="html"><![CDATA[
<p><a href="https://twitter.com/Outsideris">@Outsideris</a>님의 <a href="http://blog.outsider.ne.kr/892">자바스크립트 빌드 도구 Grunt</a>와 <a href="http://blog.outsider.ne.kr/894">Grunt에 사용자 템플릿 추가하기</a>를 읽고 <a href="https://github.com/pismute/grunt-init-node-coffee">node-coffee</a> 템플릿을 만들었다. <a href="https://twitter.com/docpad">@docpad</a> 덕에 coffeescript에 익숙해졌고 항상 Compile해서 실행하기만 하면 디버그도 할 수 있기 때문에 node를 사용할 때는 coffee를 사용하려고 하는 편이다. 그동안 make를 사용해서 좀 불편했었는데, grunt를 적용하니 정말 편하다. 좀 더 편하려고 Coffeescript에 Mocha를 기본으로 하는 템플릿을 하나 만들었다.</p>

<p><img src="http://dogfeet.github.com/articles/2013/grunt-init-node-coffee/gruntjs.png" alt=""></p>

<h2>grunt 0.4</h2>

<p>갑자기 0.4 버전이 배포되는 바람에 <a href="https://twitter.com/Outsideris">@Outsideris</a>님의 글이 내용이 틀리게 됐다. 하지만 정리가 잘돼 있어서 grunt를 이해하기에는 여전히 좋은 글이다.</p>

<p><a href="https://twitter.com/Outsideris">@Outsideris</a>님의 글을 읽고 0.3 버전용 <a href="https://github.com/pismute/grunt-init-node-coffee">node-coffee</a>를 만들었다가 나중에 글을 써야지 하고 있었는데, 0.4가 나와 버렸다. <a href="http://gruntjs.com/upgrading-from-0.3-to-0.4">upgrading-from-0.3-to-0.4</a>을 잘 읽고 적용하는 게 좋다. 나는 길어서 대충 읽었다가 삽질을 좀 했다. 다 읽기 귀찮으면 새 템플릿으로 만든 코드를 좀 읽어보고 시작하는 것이 시간을 절약해줄 것 같다.</p>

<h2>node-coffee 템플릿</h2>

<p>이 템플릿은 특징을 요약하면 아래와 같다:</p>

<ul>
<li>Coffeescript

<ul>
<li>Gruntfile.coffee</li>
<li><code>/src/lib/**/*.coffee</code>를 <code>/out/lib/**/*.js</code>로 컴파일</li>
<li><code>/src/test/**/*.coffee</code>를 <code>/out/test/**/*.js</code>로 컴파일</li>
<li>coffeelint</li>
</ul></li>
<li>Javascript

<ul>
<li><code>/src/lib/**/*.js</code>를 <code>/out/lib/**/*.js</code>로 복사</li>
<li><code>/src/test/**/*.js</code>를 <code>/out/test/**/*.js</code>로 복사</li>
<li>jshint 그대로 포함</li>
</ul></li>
<li>Mocha + Should로 변경</li>
</ul>

<p>그 외는 <a href="https://github.com/gruntjs/grunt-init-node">node</a> 템플릿을 수정한 것이기 때문에 node 템플릿과 같다.</p>

<h3>사용법</h3>

<p>다음과 같이 설치한다:</p>
<pre><code>git clone git@github<span class="variable">.com</span>:pismute/grunt-init-node-coffee<span class="variable">.git</span> ~/<span class="variable">.grunt</span>-init/node-coffee
</code></pre>
<p><a href="https://github.com/gruntjs/grunt-init">grunt-init</a>이 설치된 상태에서 다음과 같이 프로젝트를 만든다:</p>
<pre><code><span class="title">mkdir</span> my-project
<span class="title">cd</span> my-project
<span class="title">grunt</span>-init node-coffee
</code></pre>]]>
</content></entry><entry><title><![CDATA[ 그와 그녀의 tryios ]]></title><link href="http://dogfeet.github.com/articles/2013/he-she-codeschool-tryios.html" /><updated>2013-01-19T15:00:00.000Z</updated><id>http://dogfeet.github.com/articles/2013/he-she-codeschool-tryios.html</id><content type="html"><![CDATA[
<p><a href="http://www.codeschool.com/">codeschool</a>에 <a href="http://www.codeschool.com/courses/try-ios">tryios</a>가 올라오자마자 노리고 있었다. 왠지 재미도 있고 쉬울 것 같았다. 이 글은 iOS 초보인 <a href="https://twitter.com/pismute">그</a>와 코딩 초보인 <a href="http://uniquenoun.tumblr.com/">그녀</a>가 함께 <a href="http://www.codeschool.com/courses/try-ios">tryios</a>를 해보고 난 후기다.</p>

<p><img src="http://dogfeet.github.com/articles/2013/codeschool-tryios/tryios.png" alt="tryios"></p>

<h2>tryios</h2>

<p>이 강의는 제목에서처럼 정말 iOS를 소개하는 수준의 강의다. <a href="https://twitter.com/greggpollack">@greggpollack</a> 선생님이 천천히 쉬운 영어로 설명해주는 것 같지만 뭐라고 말하는지는 들을 수 없다. 내용이 쉬워서 슬라이드로도 충분하긴 하지만 그래도 영어를 알아듣고 싶다.</p>

<p>무료인 <a href="http://www.codecademy.com/">codecademy</a>보다 퀄리티가 높을 거라고는 생각했지만 이렇게 친절할 줄은 생각도 못했다. 처음 접하는 사람이 쉽게 따라 할 수 있도록 기초적인 커리큘럼에 필요한 내용만 가르쳐준다. 거기다가 동영상도 공을 들인 티가 난다. 슬라이드도 아주 예쁘다.</p>

<p>이 강의를 만드는데 무려 12명이나 참여했다:</p>

<p><img src="/articles/2013/codeschool-tryios/credit.png" alt="tryios-credit"></p>

<p>&lsquo;Mr. Higgie'라는 캐릭터 까지 있다:</p>

<p><img src="/articles/2013/codeschool-tryios/higgie.png" alt="higgie"></p>

<p>설명을 듣고, 코딩해서, 바로 검사하는 구조는 너무 매력적인 학습방법이다. <a href="https://class.coursera.org/progfun-2012-001/">Coursera의 Scala 강의</a>도 그런 방식이였는데 굉장히 잼있었다. 무엇보다 바로 내가 틀렸는지 알 수 있기 때문에 될 때까지 버티면 정말 된다.</p>

<p>Gamification이 잘 돼있어서 강의를 하나씩 끝날 때 마다 뱃지를 준다:</p>

<p><img src="/articles/2013/codeschool-tryios/badge.png" alt="badge"></p>

<p><a href="http://beta.openbadges.org/">http://beta.openbadges.org/</a> 에 연계도 된다. <a href="http://openbadges.org/">Open Badges</a>라는 거 처음 봤는데, 뭔지 모르겠다.</p>

<p>Coursera Scala 강의에서는 오덕스키 선생님의 사인이 든 수료증도 줬는데 <a href="https://twitter.com/greggpollack">@greggpollack</a> 선생님의 사인이든 수료증을 별도로 주지 않는다. 하지만 'Report Card'라는 게 있다:</p>

<p><img src="/articles/2013/codeschool-tryios/report-card.png" alt="report-card"></p>

<p>이 'Report Card'는 공개할 수도 있고 비공개로 설정할 수도 있다. 하지만 타인의 Report Card를 보는 페이지는 찾지 못했다.</p>

<p><a href="http://www.codeschool.com/">CodeSchool</a>은 한달에 $25 단위로 결제해야 한다. $25 결제하면 원하는 대로 강의를 들을 수 있다. 무료 강의도 몇개 있어서 <a href="http://www.codeschool.com/courses/try-git">trygit</a>같은 것을 무료로 해볼 수 있다.</p>

<p>뭔가 처음이라면 codeschool의 강의를 들어보는 게 좋겠다. 유료지만 한달에 $25이 아깝지 않다.</p>

<p>Kickstarter에서 $152,912를 펀딩받아 제작됐다고 한다(<a href="http://www.codeschool.com/2012">http://www.codeschool.com/2012</a>). <a href="http://macminicolo.net/">http://macminicolo.net/</a> 사람들이 만든 것 같은데(추측임), 강의 처음에 나오는 광고도 귀엽다. 앞으로도 재미난 iOS 강의가 많을 것 같아 기대된다.</p>

<h3>code TV</h3>

<p><a href="http://www.codeschool.com/">CodeSchool</a>은 <a href="http://www.codeschool.com/code_tv">Code TV</a>라는 podcast도 제공한다. podcast 링크는 iTunes에서 찾을 수 있다. 좀 잼있어 보이는 강의가 몇개 있다. 영어를 못 들으니 영어 자막을 함께 제공해 줬으면 좋겠는데 영어 자막을 제공하지는 않는다.</p>

<h3>수료</h3>

<p><a href="http://www.codeschool.com/courses/try-ios">tryios</a>를 수료하면 3가지 보상을 준다. 일단 $5에 이르는 <a href="http://www.codeschool.com/">CodeSchool</a> Cash와 'iOS SDK Development'라는 책의 25% 할인권 그리고 <a href="https://www.tinkerlearn.com/xray">TinkerLearn</a>의 50% 할인권을 준다. 지원해주는 회사가 있으면 재밌게 공부도하고 수익 남는ㅋㅋㅋ:</p>

<p><img src="/articles/2013/codeschool-tryios/reward.png" alt="reward"></p>

<p><a href="https://www.tinkerlearn.com/xray">TinkerLearn</a>은 무료 Lesson만 다운받았는데 해당 Lesson과 관련된 pdf와 샘플 코드가 들어 있다. <a href="http://www.codeschool.com/courses/try-ios">tryios</a>를 끝낸 후 다음에 뭘해야 할지 고민할 필요도 없다:</p>

<p><img src="/articles/2013/codeschool-tryios/tinkerlearn.png" alt="tinkerlearn"></p>

<h2>그녀</h2>

<p>그녀의 개발툴은 Illustrator와 Photoshop으로 프로그래밍은 잘 모른다. 디자이너도 코드를 읽을 줄 알아야 한다는 드립을 한 5년간 쳤는데, 드디어 일진보 했다.</p>

<p>내가 그녀에게 친 뻥은 아래와 같다:</p>

<ol>
<li>인생은 학습이다. 뭘 배우는지 중요치 않다. 뭐든 배우는 거다.</li>
<li>실무자가 의사 결정을 직접 해야 작업 속도가 빠르고 퀄리티도 높다. 소프트웨어 디자인을 한다면 소프트웨어에서 디자인을 어떻게 표현하는지 사람들이 어떻게 작업하는지 알아야 한다.</li>
<li>결정권이 없는 실무자는 우울해진다. 동료를 위해 디자인과 관계된 실무를 익혀라.</li>
</ol>

<p>그녀에 대답은 대체로 아래와 같았다:</p>

<ol>
<li>너부터 디자인을 배워라.</li>
<li>소프트웨어 싫다.</li>
<li>동료가 없다.</li>
</ol>

<p>그렇게 줄다리기를 하다가 <a href="http://www.codeschool.com/">CodeSchool</a> 덕택에 함께 공부를 해보게 됐다.</p>

<p>뭐든 상관 없지만, iOS를 배워보기로 했다. iOS, web, Android를 제안했는데 그녀는 iOS를 골랐다. iPhone의 완성도는 역시 너무 매력적이다.</p>

<p><a href="http://www.codeschool.com/courses/try-ios">tryios</a>를 시작하기 전에 그녀는 Objective-C를 좀 먼저 읽었다. 분명 제대로 공부를 하고 있다면 질문이 많았을 텐데 질문이 많지 않은 거로 봐서 멘붕 상태에 있다는 걸 알 수 있었다. 그녀는 <a href="http://www.codeschool.com/courses/try-ios">tryios</a> 강의를 수료한 지금도 멘붕 상태다.</p>

<p>들리지도 않는 동영상 교재를 끝까지 듣고, 처음보는 외계어로 가득찬 슬라이드를 끝까지 감내한 그녀에게 경의를 표한다.</p>

<p>총 6 챕터로 구성된 강의는 매 챕터마다 3~4시간 가량 걸렸다. tryios는 아주 기본적인 내용만 다루기 때문에 하루 정도면 충분하다. 나는 좀 불친절한 성격이라 그녀가 묻는 질문에만 대답해서 오래걸렸다.</p>

<p>내 느낌은 이렇다:</p>

<p><img src="/articles/2013/codeschool-tryios/haksan.png" alt="haksan"></p>

<p>내가 그녀라면 인내할 수 있었을까? 훌륭하다. 그녀는 이왕 결재한 거라고 하면서 <a href="http://www.codeschool.com/courses/functional-html5-css3">Functional HTML5 & CSS3</a>와 <a href="http://www.codeschool.com/courses/functional-html5-css3">CSS Cross-Country</a> 강의도 시작했다:</p>

<p><img src="/articles/2013/codeschool-tryios/functional-html5-css3.png" alt="functional-html5-css3"></p>

<p><img src="/articles/2013/codeschool-tryios/css-cross-country.png" alt="css-cross-country"></p>

<p><a href="http://www.codeschool.com/courses/try-ios">tryios</a> 강의를 끝내고 받은 퀘스트 보상때문에 나도 이 두 강의를 시작했다. 찬찬히 <a href="http://www.codeschool.com/">CodeSchool</a>의 강의를 전부 해보려한다.</p>

<h2>영어</h2>

<p>영어라는 장벽이 없었으면 나도 그녀도 좀 더 쉽게 따라 했을 것 같다. 영어로 표현된 외계어로 가득찬 자료를 끝까지 참아줘서 고맙다. 그덕에 나도 많은 것을 배웠다.</p>

<p><a href="http://www.codeschool.com/">CodeSchool</a> 강의 중에서는 영어자막을 제공하는 강의도 있다. <a href="http://www.codeschool.com/courses/try-ios">tryios</a>는 제공하지 않았는데 <a href="http://www.codeschool.com/courses/functional-html5-css3">Functional HTML5 & CSS3</a>와 <a href="http://www.codeschool.com/courses/functional-html5-css3">CSS Cross-Country</a>는 영어자막이 있다.</p>

<p>영어가 되는 사람들은 좋겠다. 쉽고 재밌는 학습 도구가 많아서 좋겠다. 글래머 금발이랑 코딩할 수 있어서 좋겠다. 앞으로는 영어를 좀 더 to-the-core하게 해서 그런 삶을 살아야 겠다.</p>
]]>
</content></entry><entry><title><![CDATA[ Git: GitHub secrets ]]></title><link href="http://dogfeet.github.com/articles/2012/git-github-secrets.html" /><updated>2012-12-29T00:00:00.000Z</updated><id>http://dogfeet.github.com/articles/2012/git-github-secrets.html</id><content type="html"><![CDATA[
<p>이글은 <a href="https://twitter.com/holman">@holman</a>님이 싱가폴에서 열린 <a href="http://reddotrubyconf.com/">RedDotRubyConf</a>에서 발표한 <a href="http://zachholman.com/talk/git-github-secrets">Git and GitHub Secrets</a>에 설명을 달았다. 내용이 길어서 둘로 나눴는데 이 글은 <code>GitHub Secetets</code> 부분을 정리한 글이다. <a href="/articles/2012/git-secrets.html">Git Secrets</a>은 다른 글에서 정리한다.</p>

<p><img src="http://dogfeet.github.com/articles/2012/git-github-secrets/holman.png" alt="holman"></p>

<p>이 글을 정리하면서 그림을 많이 삽입하지 않았다. <code>GitHub Secrets</code> 부분은 그림이 너무 많아서 생략했다. 이 글을 읽고서 슬라이드를 한번 보는게 좋을 것 같다.</p>

<h2>숨겨진 기능</h2>

<p>GitHub은 단순함을 추구한다. 그래서 GitHub에는 기능이 많은 데도 불구하고 굳이 화면에 보여주지 않는다.</p>

<h3>.patch, .diff</h3>

<p>커밋 URL 뒤에 .patch나 .diff 붙이면 해당 포멧의 파일이 나온다. 정확하게는 &lsquo;Compare View, Pull Requests, Commit Pages&rsquo; 화면에서 사용할 수 있다.</p>

<ul>
<li><a href="https://github.com/dogfeet/dogit/commit/a1f156b6415439a8a84c3d2fa89ea975fb3a7ac2.diff">.diff 예제</a></li>
<li><a href="https://github.com/dogfeet/dogit/commit/a1f156b6415439a8a84c3d2fa89ea975fb3a7ac2.patch">.patch 예제</a></li>
</ul>

<h2>공백문자는 무시하고 diff를 보여준다.</h2>

<p>diff URL끝에 <code>?w=1</code>를 붙이면 공백문자를 무시한 결과를 보여준다.</p>

<p><img src="/articles/2012/git-github-secrets/ignore-whitespace.png" alt="ignore_whitespace"></p>

<h3>SVN 클라이언트도 지원.</h3>

<p>&lsquo;SVN/Git 서비스 레이어'가 있어서 SVN 요청을 Git 요청으로 변환해준다.</p>

<p>당연히 Git 클라이언트를 사용할 수 있지만:</p>
<pre><code>$ git <span class="keyword">clone</span> https:<span class="comment">//github.com/dogfeet/dogit.git</span>
</code></pre>
<p>SVN 클라이언트도 사용할 수 있다:</p>
<pre><code><span class="char">$ </span>svn checkout <span class="method">https:</span>//github.com/dogfeet/dogit.git
</code></pre>
<h3>SSH & HTTP => HTTP & SSH</h3>

<p>GitHub은 기본 프로토콜을 SSH에서 HTTP로 바꿨다. 원래 HTTP 프로토콜을 사용하는 방식은 성능이 후져서 SSH를 권장했는데 이제 SmartHTTP 덕택에 HTTP도 효율적이다.</p>

<p>원래 SSH를 먼저 보여줬었지만:</p>

<p><img src="/articles/2012/git-github-secrets/ssh-http.png" alt="before"></p>

<p>지금은 HTTP를 먼저 보여준다:</p>

<p><img src="/articles/2012/git-github-secrets/http-ssh.png" alt="after"></p>

<p>이제 HTTP도 효율적이기 때문에 1) 회사 방화벽 뒤에서도 맘껏 GitHub을 즐길 수 있고 2) SSH Key를 사용하기 힘든 Windows 환경에서도 사용하기 쉬워졌다. SSH key없이도 암호를 메모리에 저장해서 사용할 수 있다. 이 방법은 git 1.7.10부터 사용할 수 있고 GitHub의 <a href="https://help.github.com/articles/set-up-git">패스워드 캐싱하는 방법</a>에 잘 설명돼 있다.</p>

<h4>SmartHTTP</h4>

<p>SmartHTTP는 git 1.6.6부터 지원한다. git 1.6.6은 2009년 말에 배포됐다.</p>

<p>Git은 개체를 'Packfile'이라는 덩어리에 묶어서 관리한다. 이전 버전에서는 사용자가 'Packfile'에 들어 있는 개체 한 개가 필요해도 <code>Packfile</code>을 통째로 전송해야 했다. 그래서 HTTP를 더미 프로토콜이라고 불렀다. 이제는 SmartHTTP가 있어서 'Packfile'에서 필요한 개체만 꺼내서 전송할 수 있다.</p>

<p>progit 책을 집필할 때에는 SmartHTTP가 없었기 때문에 이를 설명하지 않았다. SmartHTTP에 대해서 자세히 알아보려면 progit 9장과 <a href="http://git-scm.com/2010/03/04/smart-http.html">Smart HTTP Transport</a>를 읽는게 좋다.</p>

<h3>URL에서 &rsquo;.git'은 생략해도 된다.</h3>
<pre><code>git <span class="keyword">clone</span> https:<span class="comment">//github.com/holman/boom.git</span>
git <span class="keyword">clone</span> https:<span class="comment">//github.com/holman/boom</span>
</code></pre>
<h3>GitHub HD&trade;</h3>

<p>GitHub 페이지의 아이콘이 HD 벡터 아이콘이라서 계속 확대해도 깨지지 않는다.</p>

<h3>Auditing</h3>

<p>우리말로 하자면 &lsquo;감사로그&rsquo; 쯤 되는 건데, GitHub에서 일어난 중요한 액션은 로그가 남는다:</p>

<p><a href="https://github.com/settings/security">https://github.com/settings/security</a></p>

<h3>Octocat</h3>

<p><a href="https://twitter.com/defunkt">@defunkt</a>님이 에러페이지에 사용할 이미지를 찾다가 <a href="http://www.istockphoto.com/">Istockphoto</a>에서 싸게 산 이미지였는데 사람들이 좋아해서 지금은 GitHub의 마스코드가 됐다. 처음에는 아니였지만 지금은 GitHub이 저작권을 가지고 있다.</p>

<p><a href="http://www.quora.com/GitHub/What-is-the-story-behind-GitHub%E2%80%99s-octocat-mascot">Octocat 스토리</a>는 Quora에서 참고.</p>

<p><a href="http://octodex.github.com/">http://octodex.github.com/</a> 에 가면 Octocat 이미지가 많다.</p>

<h3>git.io</h3>

<p>GitHub용 URL Shortner이다. 작은 <a href="git.io/nxVVig">쉘 스크립트</a>로 구현돼 있고 다음과 같이 사용한다.</p>
<pre><code>$ gitio <span class="tag">&lt;<span class="title">url</span>&gt;</span> <span class="tag">&lt;<span class="title">name</span>&gt;</span>
</code></pre>
<p><a href="https://chrome.google.com/webstore/detail/gitio-url-shortener/baceaeopmlhkjbljoiinmbnnmpokgiml">Chrome Extension</a>도 있다.</p>

<h3>Linguist</h3>

<p>저장소에 든 언어가 뭔지 찾아서 직접 그 저장소에서 개발된 파일만 추려서 &lsquo;Syntax Highlighting'도 해준다. GitHub은 이 Linguist를 다음과 같은 걸 만들어 내는데 사용한다:</p>

<p><img src="/articles/2012/git-github-secrets/linguist.png" alt="linguist"></p>

<p>기능:</p>

<ul>
<li>'Language Detection&rsquo; - 어떤 언어가 사용됐는지 찾는다.</li>
<li>&lsquo;Stats&rsquo; - 언어 통계를 알려준다.</li>
<li>&lsquo;Syntax Highlighting&rsquo; - Pygments를 사용한다.</li>
<li>&lsquo;Vendored Files&rsquo; - 저장소에 들어 있는 파일 중 다른 프로젝트에서 가져온 파일. ex) jquery.js</li>
<li>&lsquo;Generated file detection&rsquo; - 생성되는 파일을 알아서 제외한다.</li>
</ul>

<h3>email reply</h3>

<p>이메일로 comments에 답변을 달 수 있다.</p>

<h3>gist</h3>

<p>단순히 코드 snippet을 공유하는 도구가 아니다. 코멘트, 스크린샷, 코드를 공유를 할 수 있기 때문에 프로토타이핑 도구로 사용하기에도 좋다. 개발자와 디자이너 모두에게 유용하다.</p>

<p>gist 자체가 git 저장소이기 때문에 clone할 수도 있다:</p>
<pre><code><span class="title">git</span> clone <span class="url">git://gist.github.com/2720312</span>
</code></pre>
<p>간단하게 만들어서 프로토타이핑을 해보기에 아주 좋다.</p>

<h4>microgems.</h4>

<p>Ruby Gem으로도 사용할 수 있는 것 같다. 나는 Ruby를 몰라서 알 수 없다.</p>

<p><a href="http://jeffkreeftmeijer.com/2011/microgems-five-minute-rubygems/">http://jeffkreeftmeijer.com/2011/microgems-five-minute-rubygems/</a></p>

<h3>Image View Mode</h3>

<p>Gist에 이미지를 올리고 비교하면 비교해보기 좋게 나열해준다. 정말 쩐다. 데모 페이지에 가서 클릭해보자.</p>

<p>이 기능은 <a href="http://www.kaleidoscopeapp.com/">KaleidoScope</a>같은 도구에서 있는 건데 GitHub도 된다. <a href="http://www.sourcetreeapp.com/">SourceTree</a>같은 데서도 가능하면 좋겠다.</p>

<p>GitHub의 <a href="https://github.com/blog/817-behold-image-view-modes">Behold: Image view modes</a>에 잘 소개돼 있다.</p>

<h3>Command Line GitHub - hub</h3>

<p><a href="https://github.com/defunkt/hub">hub</a>라는 프로그램이 있다. Command Line에서 GitHub을 사용할 수 있는 명령이다. git + github 명령이라고 생각하면 된다. GitHub을 사용하면서 자동화한다면 꼭 필요한 툴이라고 생각된다. 나중에 따로 정리해야 겠다.</p>

<h3>Keyboard Shortcuts</h3>

<p>GitHub의 모든 페이지에서 <code>?</code>를 누르면 그 페이지에서 사용할 수 있는 단축키를 보여준다.</p>

<h3>Subscribing People</h3>

<p>GitHub에서 글쓸때 <code>@pismute</code>쓰면 해당 사용자에게 알림이 간다. <code>@org/team</code>라는 팀 표현식도 있어서 팀 전체한테 노티를 줄수도 있다.</p>

<h3>GitHub Flavored Markdown</h3>

<p><a href="http://github.github.com/github-flavored-markdown/">GFM</a>에 대한 설명도 있다.</p>

<h3>Auto-Closing Issues</h3>

<p>커밋메시지에 <code>CLOSES/CLOSED/CLOSE #1</code>나 <code>FIXES/FIXED/FIX #1</code>라고 쓰면 해당 이슈가 자동으로 닫힌다.</p>

<h3>Commit by Author</h3>

<p>GitHub의 커밋 페이지에서 <code>?author=holman</code> 처럼 파라미터를 넘기면 해당 사용자의 커밋만 볼 수 있다:</p>

<ul>
<li><a href="https://github.com/progit/progit/commits/master?author=pismute">https://github.com/progit/progit/commits/master?author=pismute</a></li>
</ul>

<h3>Branch-to-Branch</h3>

<p>Pull Request는 브랜치 단위로 하는 거라는 얘기. 그래서 원 저장소가 아니라 Clone 저장소에도 Pull Request를 보낼 수 있다.</p>

<h3>emoji!</h3>

<p>GitHub에서 emoji 이모티콘을 사용할 수 있다. 사용할 수 있는 이모티콘은 <a href="http://www.emoji-cheat-sheet.com/">http://www.emoji-cheat-sheet.com/</a> 에서 참고.</p>

<h3>Link Linking</h3>

<p>GitHub 페이지에서 파일 보기 화면에서 URL 뒤에 <code>#L16</code>을 붙이면 16라인이 노랗게 보인다. <code>#L16-32</code>를 붙이면 16라인부터 32라인까지 노랗게 보인다. 다른 사람과 코드에 대해 수다떨 때 어떤 라인에 대해서 얘기하는 건지 콕 집어 줄 수 있다.</p>

<h3>Advanced Compare View</h3>

<p><code>github.com/user/repo/compare/{range}</code>과 같은 형식의 URL을 사용하면 되고 <code>{range}</code>부분에 다음과 같이 넣을 수 있다:</p>

<ul>
<li><code>master@{1.day.ago}...master</code></li>
<li><code>master@{yesterday}...master</code></li>
<li><code>master@{2012-02-25}...master</code></li>
</ul>

<p>아래와 같이 사용한다:</p>

<p><a href="https://github.com/dogfeet/dogit/compare/master@%7B60.day.ago%7D...master">https://github.com/dogfeet/dogit/compare/master@{60.day.ago}&hellip;master</a></p>
]]>
</content></entry><entry><title><![CDATA[ Git: git secrets ]]></title><link href="http://dogfeet.github.com/articles/2012/git-secrets.html" /><updated>2012-12-19T00:00:00.000Z</updated><id>http://dogfeet.github.com/articles/2012/git-secrets.html</id><content type="html"><![CDATA[
<p>이글은 <a href="https://twitter.com/holman">@holman</a>님이 싱가폴에서 열린 <a href="http://reddotrubyconf.com/">RedDotRubyConf</a>에서 발표한 <a href="http://zachholman.com/talk/git-github-secrets">Git and GitHub Secrets</a>에 설명을 달았다. 내용이 길어서 둘로 나눴는데 이 글은 <code>Git Secetets</code>부분을 정리한 글이다. <a href="/articles/2012/git-github-secrets.html">GitHub Secrets</a>은 다른 글에 정리한다.</p>

<p>Git은 명령과 옵션이 굉장히 많은데, 그 중에서 <a href="https://twitter.com/holman">@holman</a>님이 추천하는 쓸만한 것이라고 생각하면 되겠다.</p>

<p><img src="http://dogfeet.github.com/articles/2012/git-secrets/holman.png" alt="holman"></p>

<h2>Git secret</h2>

<h3>&ndash;allow-empty</h3>

<p>파일없이 커밋할 수 있다:</p>
<pre><code><span class="comment">$</span> <span class="comment">git</span> <span class="comment">commit</span> <span class="literal">-</span><span class="comment">m</span> <span class="comment">"LOOK</span> <span class="comment">AT</span> <span class="comment">ME</span> <span class="comment">TROLOLOL"</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">allow</span>-<span class="comment">empty</span>
</code></pre>
<p><code>git log</code>를 하면 아무내용없이 그냥 커밋 개체만 달랑 생긴다.</p>
<pre><code>$ git log
<span class="operator"><span class="keyword">commit</span> <span class="number">6</span>eb28f645174fba20d819f40da4ca822c7c67b2a
Author: Changwoo Park &lt;pismute@gmail.com&gt;
<span class="keyword">Date</span>:   Tue Nov <span class="number">12</span> <span class="number">20</span>:<span class="number">32</span>:<span class="number">25</span> <span class="number">2012</span> +<span class="number">0900</span>

    LOOK <span class="keyword">AT</span> ME TROLOLOL
</code></pre>
<p>히스토리에 뭔가 표식을 남기고 싶을 때 유용하다.</p>

<h3>Staging Hunk</h3>

<p>파일에서 한 부분? 덩어리?를 Hunk라고 부른다. <code>git add -p</code> 명령으로 파일을 통째로 Staging Area에 넣는게 아니라 일정 부분만(hunk만) 골라서 넣는다.</p>

<p>자세한 설명은 <a href="https://twitter.com/semtlnori">@semtlnori</a>님의 <a href="http://npcode.com/blog/archives/449">깔끔하게 커밋하기</a>를 보자.</p>

<h3>git show :/query</h3>

<p>특정 질의가 들어간 커밋 중에서 가장 최근 커밋 하나를 찾아 준다. 로그를 분석할때 매우 유용하다. 커밋 메시지, 파일 이름, 파일 내용에서 찾는다.</p>

<p><code>git log</code> 명령에도 있어서 <code>git log :/query</code>라고 실행해도 된다. <code>:/query</code> 만족하는 커밋을 골라서 보여준다.</p>

<h3>go back</h3>

<p><code>cd -</code>라고 실행하면 이전 디렉토리로 되돌아 간다. <code>cd</code>명령 처럼 <code>git checkout -</code>라고 하면 이전 브랜치를 checkout한다.</p>

<h3>merged branch</h3>

<p>브랜치나 커밋이 다른 브랜치에 Merge됐는지 확인하는 명령들.</p>

<ul>
<li><code>git branch --merged</code> : 이미 다른 브랜치에 머지된 것만 보여준다.</li>
<li><code>git branch --no-merged</code> : 아직 다른 브랜치에 머지되지 않는 것만 보여준다.</li>
<li><code>git branch --contains 838ad46</code> : 특정 커밋이 포함된 브랜치만 보여준다.</li>
</ul>

<h3>Content Copy</h3>

<p>브랜치를 변경하지 않고도 다른 브랜치에 들어 있는 파일을 복사해 올 수 있다:</p>
<pre><code><span class="comment">$</span> <span class="comment">git</span> <span class="comment">checkout</span> <span class="comment">BRANCH</span> <span class="literal">-</span><span class="literal">-</span> <span class="comment">path/to/file</span>.<span class="comment">rb</span>
</code></pre>
<p><code>path/to/file.rb</code>에 파일이 복사된다.</p>

<p>Reset과 Checkout은 비슷해보여서 구분하기 쉽지 않다. Checkout은 데이터베이스에서 뭔가를 꺼낼때 사용하는 명령이다. 옵션도 스냅샷과 파일이름 등 그와 관련된 옵션으로 구성돼있다. 반대로 Reset은 워킹 디렉토리, Staging Area, 브랜치 등을 스냅샷으로 Reset하는 명령이다.</p>

<p>이렇게 구분하면 쉽다. 데이터베이스에서 뭔가를 꺼낼때는 Checkout을 사용하고 그외는 Reset을 사용한다.</p>

<h3>Reachable Commits</h3>

<p>특정 브랜치에만 있는 커밋이 보고 싶을 때는 다음과 같이 한다:</p>

<p><code>git log branchA ^branchB</code></p>

<p>branchA에는 있고 branchB에는 없는 커밋을 보여준다.</p>

<h3>FINDING LOST COMMITS</h3>

<p>어떤 브랜치에도 들어 있지 않은 커밋을 보여준다. git의 커밋은 개체는 실제로 전부 immutable이라서 커밋을 수정하면 새로운 커밋 개체가 등록된다. 잘 못 수정했으면 아래 명령으로 커밋을 찾아서 복구한다:</p>
<pre><code>$ git fsck <span class="comment">--lost-found</span>
Checking object directories: 100% (256/256), done.
dangling <span class="operator"><span class="keyword">commit</span> <span class="number">4</span>a7f2e89a480d3af0ccfdf71f76f4149f25fb0fb
dangling <span class="keyword">commit</span> d3ad9f17532109d12084646c306e9d7748c2f791
</code></pre>
<p>어떤 브랜치에도 속하지 않은 커밋이 두 개있다.</p>

<h2>DIFFSTATS</h2>

<p>델타(diff)를 다 보여주는 게 기본인데 통계만 볼 수도 있다:</p>

<p><code>git diff HEAD^ --stat</code></p>

<p><img src="/articles/2012/git-secrets/git-diff--stat.png" alt="git-diff--stat"></p>

<h3>BLAME</h3>

<p><code>git blame</code>은 기본적으로 어떤 라인을 누가 고쳤는지 확인하는 명령이다.</p>

<p><strong>blame이니까</strong></p>

<p><code>git blame</code>은 기본적으로 어떤 라인을 <strong>어떤 새끼</strong>가 고쳤는지 확인하는 명령이다.</p>

<h4>git blame -w</h4>

<p>정말 내용을 수정한 <strong>새끼</strong>를 찾는다. 공백만 추가한 경우는 무시한다. <code>git diff HEAD~</code> 명령으로 공백이 어디에 추가됐는지 보자:</p>

<p><img src="/articles/2012/git-secrets/git-blame-w-diff.png" alt="git-blame-w-diff"></p>

<p>히스토리를 보면 마지막에 &ldquo;BBB&quot;가 공백을 추가했다:</p>

<p><img src="/articles/2012/git-secrets/git-blame-w-lg.png" alt="git-blame-w-lg"></p>

<p>다음은 <code>git blame -w</code>의 결과다:</p>

<p><img src="/articles/2012/git-secrets/git-blame-w.png" alt="git-blame-w"></p>

<p>단순히 공백만 추가한 &quot;BBB&quot;는 무시된다. <code>-w</code>을 옵션을 빼고 <code>git blame</code>만 실행하면 공백만 추가한 &quot;BBB&quot;도 나온다.</p>

<p><img src="/articles/2012/git-secrets/git-blame.png" alt="git-blame"></p>

<h4>git blame -M</h4>

<p>해당 라인을 실질적으로 마지막에 수정한 사람을 보여준다. 이 옵션을 주면 같은 파일 내에서 단순히 라인을 옮긴 사람이 아니라 마지막으로 내용을 수정한 사람이 표시된다:</p>

<p>텍스트를 옮긴 후에 <code>git blame</code> 명령을 실행하면 다음과 같이 나온다:</p>

<p><img src="/articles/2012/git-secrets/git-blame-m-before.png" alt="git-blame"></p>

<p><code>-M</code> 옵션을 추가하면 단순히 옮긴 사람이 아니라 원래 그 코드를 추가한 사람을 보여준다:</p>

<p><img src="/articles/2012/git-secrets/git-blame-m.png" alt="git-blame"></p>

<p>원래 의도는 측근 <code>all.md</code> 파일에서 친구 끼리, 가족 끼리 모아서 <code>-M</code> 옵션을 설명할 계획이였다. Git이 정확히 어떤 알고리즘을 사용하는 건지 나중에 살펴봐야 겠다.</p>

<h4>git blame -C</h4>

<p><code>-M</code>와 비슷하게 실제로 마지막에 수정한 사람을 보여준다. 한 파일 내에서의 이동만 감지하는 것이 아니라. 같은 커밋에서의 다른 파일간 이동도 감지한다.</p>

<p><code>all.md</code>라는 파일에서 친구는 <code>friends.md</code>라는 파일로 옮기고 가족은 <code>family.md</code> 파일로 옮겼다. 아래는 <code>git blame -f family.md</code>의 결과다:</p>

<p><img src="/articles/2012/git-secrets/git-blame-c-f.png" alt="git-blame"></p>

<p><code>-f</code>는 원래 파일이름을 보여주는 옵션이다. <code>git blame -fC family.md</code>의 결과는 아래와 같다:</p>

<p><img src="/articles/2012/git-secrets/git-blame-c-cf.png" alt="git-blame"></p>

<h4>git blame -CC</h4>

<p><code>-C</code> 처럼 다른 파일에서 옮긴 것을 감지해주는데 해당 파일을 생성한 커밋내에서도 감지한다.</p>

<h4>git blame -CCC</h4>

<p>다른 파일에서 옮긴 것도 감지하는데 커밋을 가리지 않고 전체에서 찾는다.</p>

<h4>MULTI-REMOTE FETCHES</h4>

<p>원래는 하나씩 fetch해야 하지만 group을 만들어서 한번에 fetch할 수 있다.</p>
<pre><code><span class="variable">$ </span>git config remotes.mygroup <span class="string">'remote1 remote2'</span>
<span class="variable">$ </span>git fetch mygroup
</code></pre>
<h4>A BETTER STATUS</h4>

<p>status의 결과를 더 간략하게 볼 수 있다.</p>

<p><code>git status</code>:</p>

<p><img src="/articles/2012/git-secrets/git-status.png" alt="git-status"></p>

<p><code>git status -sb</code>:</p>

<p><img src="/articles/2012/git-secrets/git-status-sb.png" alt="git-status-sb"></p>

<h4>WORD DIFFING</h4>

<p>라인 단위로 비교하는 것이 아니라 단어 단위로 비교해서 볼 수 있다.</p>

<p><code>git diff HEAD^</code>:</p>

<p><img src="/articles/2012/git-secrets/git-diff-head-1.png" alt="diff-head-1"></p>

<p><code>git diff HEAD^ --word-diff</code>:</p>

<p><img src="/articles/2012/git-secrets/git-diff-head-1--word-diff.png" alt="diff-head-1--word-diff"></p>

<h4>CONFIG: SPELLING</h4>

<p><code>git comit</code>이라고 실행하면 <code>commit</code>이라고 할려고 했냐? 라고 물어봐 주는 게 기본설정이다. 명령을 실행할 때 오타를 내면 자동으로 인식해서 실행하게 할 수 있다. 다음과 같이 설정하면 된다:</p>
<pre><code><span class="comment">$</span> <span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">global</span> <span class="comment">help</span>.<span class="comment">autocorrect</span> <span class="comment">1</span>
</code></pre>
<p>이 옵션이 설정되면 <code>git comit</code>이라고 실행하면 그냥 <code>git commit</code>이 실행된다:</p>

<h4>CONFIG: GIT RERERE(REUSE RECORDED RESOLUTION)</h4>

<p><a href="/articles/2012/git-rerere.html">Git: rerere</a>에서 확인한다.</p>

<h4>CONFIG: COLOR!</h4>

<p>다음과 같이 설정하면 결과가 칼라로 나온다.</p>
<pre><code><span class="comment">$</span> <span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">global</span> <span class="comment">color</span>.<span class="comment">ui</span> <span class="comment">1</span>
</code></pre>
<h4>ALIAS: GIT-AMEND</h4>

<p>아래와 같이 alias를 등록하면 <code>git amend</code>라고 실행해서 HEAD 커밋을 수정할 수 있다. <code>-C</code> 옵션이 있기 때문에 커밋 메시지는 수정하지 않는다. 항상 커밋 메시지를 확인하고 싶으면 <code>-C HEAD</code>를 빼면 된다.</p>
<pre><code><span class="comment">$</span> <span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">global</span> <span class="comment">alias</span>.<span class="comment">amend</span> <span class="comment">"commit</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">amend</span> <span class="literal">-</span><span class="comment">C</span> <span class="comment">HEAD"</span>
</code></pre>
<h4>ALIAS: GIT-UNDO</h4>

<p>가장 최근 커밋을 되돌린다. <code>--soft</code>이기 때문에 그 커밋의 개체는 Staged 상태로 남는다:</p>
<pre><code><span class="comment">$</span> <span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">global</span> <span class="comment">alias</span>.<span class="comment">undo</span> <span class="comment">"reset</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">soft</span> <span class="comment">HEAD^"</span>
</code></pre>
<h4>ALIAS: GIT-COUNT</h4>

<p>누가 얼마나 커밋했는지 보여준다:</p>
<pre><code><span class="comment">$</span> <span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">global</span> <span class="comment">alias</span>.<span class="comment">count</span> <span class="comment">"shortlog</span> <span class="literal">-</span><span class="comment">sn"</span>
</code></pre>
<p><img src="/articles/2012/git-secrets/git-shortlog-sn.png" alt="git-shortlog-sn"></p>

<h4>SCRIPT: GIT-CREDIT</h4>

<p>가장 마지막 커밋 author 정보를 바꿀일은 종종 생긴다. 실수일 수도 있고 아닐 수도 있지만 뭐 어찌됐건 최근 커밋의 author를 마음대로 바꾸고 싶을 때가 있다. 다음과 같이 config에 등록한다:</p>
<pre><code><span class="shebang">#!/bin/sh</span>

git commit --amend --author <span class="string">"<span class="variable">$1</span> &lt;<span class="variable">$2</span>&gt;"</span> -C HEAD
</code></pre>
<p><code>git credit &quot;Zach Holman&quot; zach@example.com</code>이라고 실행하면 최근 커밋의 author 정보가 변경된다.</p>

<p><a href="https://twitter.com/holman">@holman</a>님은 <a href="https://twitter.com/holman">@holman</a>님의 <a href="https://github.com/holman/dotfiles/tree/master/bin">dotfile</a> 프로젝트에 가면 <a href="https://twitter.com/holman">@holman</a>님이 사용하는 <code>git-credit</code> 스크립트가 있다.</p>

<h4>Octocat</h4>

<p>이 슬라이드로 옥토캣은 다리가 4개고 꼬리가 1개라는 비밀을 알게 됐다. 맨날 보는 그림이지만 문어니까 그냥 다리가 8개라고 생각했었다.</p>

<p><img src="/articles/2012/git-secrets/pusheencat.png" alt="octocat"></p>
]]>
</content></entry><entry><title><![CDATA[ 잘 빠진 군체 알고리즘 - flock ]]></title><link href="http://dogfeet.github.com/articles/2012/flocking-algorithm.html" /><updated>2012-12-02T15:00:00.000Z</updated><id>http://dogfeet.github.com/articles/2012/flocking-algorithm.html</id><content type="html"><![CDATA[
<style>
canvas {display:block;}
.flock {margin-left: 10px;}
</style>

<p><img src="http://dogfeet.github.com/articles/2012/flocking-algorithm/800px-Red-billed_quelea_flocking_at_waterhole.jpg" alt="flock"></p>

<p><a href="http://harry.me/2011/02/17/neat-algorithms---flocking/">harry</a> 님의 사이트에서 보았던 플로킹 알고리즘(flockng algorithm)을 정리했다.(무려 2011년 2월 글이다.) 플로킹 알고리즘은 떼(flock)의 각 개체의 행동 모델이다. 각 개체는 보이드(boid)라고 부르며 이들은 세 가지 규칙을 이용해 움직인다. 이 알고리즘은 1986년에 Craig Reynolds가 낸 논문에서 처음 소개되었다. 원래 알고리즘은 <a href="http://www.red3d.com/cwr/boids/">여기서</a> 볼 수 있다. 그는 이 모델을 이용해 새 떼나 물고기 떼 등을 시뮬레이션했으며 배트맨 리턴즈의 박쥐 떼가 날아다니는 영상, 소셜 네트워크에서 의견의 흐름을 시뮬레이션해서 미래 의견을 예측하거나 분산 시스템에서도 이용되었다고 한다. 어디에서 쓰였는지는 링크를 확인하고 알고리즘이 어떻게 동작하는지 보자.</p>

<h2>예제 먼저</h2>

<div class="flock" id="prettyDemo"></div>

<p>옆의 버튼을 눌러서 한 보이드에 대한 자세한 정보와 그 범례를 볼 수 있다. : <button class="awesome" id="decorateDemo">Undecorate</button></p>

<p>구현은 harry 사이트의 것을 그대로 가져왔다. Coffee Script로 이루어져 있으며 HTML5의 canvas를 이용해서 애니메이션 데모를 보여준다. 따라서 애니메이션 데모를 보고 싶다면 canvas가 지원되는 브라우저로 들어오기를 바란다.  애니메이션은 <a href="http://processingjs.org/">ProcessingJS</a>를 이용해서 이루어진다. (ProcessingJS에 대한 지식은 그리 필요하진 않다.) 이 페이지의 모든 애니메이션 데모는 버튼으로 애니메이션 속도를 조정할 수 있고 애니메이션 화면을 클릭해서 일시 정지시킬 수 있다. 물론 다시 클릭하면 다시 애니메이션이 진행된다. 정지 되었을 때에는 각 보이드에 마우스를 올려서 그 보이드의 정보를 볼 수 있다. 정보를 보는 법은 이 글을 읽으면서 알 수 있으니 성급해하지 말자.</p>

<h2>보이드 - Boid</h2>

<p>보이드는 무리를 이루는 개체 하나하나를 부르는 이름이다. 여기저기에서 에이전트라고 하기도 하고 오브젝트라고도 하지만 원문에 보이드라고 되어있으니 여기서도 보이드라고 부르기로 하자. 보이드는 위치와 속도를 데이터로 가지고 있다. 그리고 위에서 말한 세 가지 행동 규칙을 이용해 가속도를 계산한다. 가속도는 현재 속도에 영향을 미치고 속도에 의해 다음 위치가 결정된다. 이런 일을 하는 메서드가 <code>step</code>이다. 보이드가 너무 빨라지지 않도록 최고 속도를 정해놓고 그보다는 높아지지 않도록 조종하는 것도 중요하다. 다음 코드를 보자. </p>
<pre><code class="lang-coffeescript"><span class="comment"># Ported almost directly from http://processingjs.org/learning/topic/flocking</span>
<span class="comment"># thanks a whole lot to Craig Reynolds and Daniel Shiffman</span>

<span class="class"><span class="keyword">class</span> <span class="title">Boid</span></span>
  location: <span class="literal">false</span>
  velocity: <span class="literal">false</span>

  constructor: (loc, processing) -&amp;gt;
    <span class="property">@velocity</span> = <span class="keyword">new</span> Vector(Math.random()*<span class="number">2</span>-<span class="number">1</span>,Math.random()*<span class="number">2</span>-<span class="number">1</span>)
    <span class="property">@location</span> = loc.copy()
    <span class="property">@p</span> = processing

  <span class="comment"># Called every frame. Calculates the acceleration using the flock method, </span>
  <span class="comment"># and moves the boid based on it.</span>
  step: (neighbours) -&amp;gt;
    acceleration = <span class="keyword">this</span>.flock(neighbours)
    <span class="property">@velocity</span>.add(acceleration).limit(MAX_SPEED) <span class="comment"># Limit the maximum speed at which a boid can go</span>
    <span class="property">@location</span>.add(<span class="property">@velocity</span>)
    <span class="keyword">this</span>._wrapIfNeeded()

  <span class="comment"># Implements the flocking algorthim by collecting the three components </span>
  <span class="comment"># and returning a weighted sum.</span>
  flock: (neighbours) -&amp;gt;
    separation = <span class="keyword">this</span>.separate(neighbours).multiply(SEPARATION_WEIGHT)
    alignment = <span class="keyword">this</span>.align(neighbours).multiply(ALIGNMENT_WEIGHT)
    cohesion = <span class="keyword">this</span>.cohere(neighbours).multiply(COHESION_WEIGHT)
    <span class="keyword">return</span> separation.add(alignment).add(cohesion)
</code></pre>
<p>제일 마지막 메서드인 <code>flock</code>이 앞으로 설명할 세 가지 행동 규칙으로 가속도를 만들어내는 메서드이다. 이에 대한 자세한 이야기는 이 글의 끝에서 하도록 한다.</p>

<h2>응집 - Cohesion</h2>

<div class="flock" id="cohesionDemo" style="float:right;"></div>

<p>보이드는 자기 주변의 보이드의 곁으로 가려는 성질이 있다. 즉 무리지으려는 성질이라고 볼 수 있다. &lsquo;자기 주변의 보이드'는 자신 주변 반경 n 픽셀 안에 있는 보이드로 정의되고 <code>NEIGHBOUR_RADIUS</code>라는 상수가 그 주변을 결정하는 반경 값이다. 하나의 보이드는 주변 보이드들 사이의 무게 중심 쪽으로 방향을 튼다. </p>

<p>옆의 예제를 보면 분홍색 보이드의 Cohesion 정보가 표시되고 있다. 녹색 원이 자신의 주변을 뜻하는 범위이고 그 안에 들어온 보이드들은 녹색으로 표시된다. 그리고 짙은 보라색 화살표가 주변 보이드들의 평균 위치 한 점으로 모인다. 분홍색 보이드는 분홍색 화살표를 이용해 &lsquo;나 그쪽으로 회전 중입니다'라고 알리고 있다.</p>

<div style="clear:right"></div>

<h3>코드</h3>

<p>Cohesion은 <code>NEIGHBOUR_RADIUS</code>안에 있는 모든 보이드의 위치의 평균이다. 코드는 <code>steer_to</code>메서드를 거쳐 리턴한다. <code>stear_to</code>는 현재 위치와 갈 곳을 계산해서 보이드의 방향을 자연스럽게 틀어주는 역할을 한다. 일종의 보정이라고 생각하면 된다.</p>
<pre><code class="lang-coffeescript"><span class="class"><span class="keyword">class</span> <span class="title">Boid</span></span>

  <span class="comment"># 가속도를 계산할 때 cohesion요소를 계산하기 위해 호출한다.</span>
  cohere: (neighbours) -&amp;gt;
    sum = <span class="keyword">new</span> Vector
    count = <span class="number">0</span>
    <span class="keyword">for</span> boid <span class="keyword">in</span> neighbours
      d = <span class="property">@location</span>.distance(boid.location)
      <span class="keyword">if</span> d &amp;gt; <span class="number">0</span> <span class="keyword">and</span> d &amp;lt; NEIGHBOUR_RADIUS
        sum.add(boid.location)
        count++

    <span class="keyword">if</span> count &amp;gt; <span class="number">0</span>
      <span class="keyword">return</span> <span class="keyword">this</span>.steer_to sum.divide(count)
    <span class="keyword">else</span>
      <span class="keyword">return</span> sum <span class="comment"># 아무런 영향도 주지 않기 위해 빈 벡터를 리턴한다.</span>

  steer_to: (target) -&amp;gt;
    desired = Vector.subtract(target, <span class="property">@location</span>) <span class="comment"># 현재 위치에서 가려 하는 곳을 가리키는 벡터</span>
    d = desired.magnitude()  <span class="comment"># 현재 위치에서 목적지까지의 거리는 벡터의 크기이다.</span>

    <span class="comment"># 만약 거리가 0보다 크면 변경할 방향을 계산한다. (아니면 0을 리턴한다.)</span>
    <span class="keyword">if</span> d &amp;gt; <span class="number">0</span>
      desired.normalize()

      <span class="comment"># 원하는 벡터의 크기를 계산하기 위한 두 옵션(1 -- 거리에 기초하여, 2 -- 최대 스피드)</span>
      <span class="keyword">if</span> d &amp;lt; <span class="number">100.0</span>
        desired.multiply(MAX_SPEED*(d/<span class="number">100.0</span>)) <span class="comment"># 이 제동은 임의적으로 정했다.</span>
      <span class="keyword">else</span>
        desired.multiply(MAX_SPEED)

      <span class="comment"># Steering = Desired minus Velocity</span>
      steer = desired.subtract(<span class="property">@velocity</span>)
      steer.limit(MAX_FORCE)  <span class="comment"># 방향 전환 정도에 제한을 둔다.</span>
    <span class="keyword">else</span>
      steer = <span class="keyword">new</span> Vector(<span class="number">0</span>,<span class="number">0</span>)

    <span class="keyword">return</span> steer
</code></pre>
<h2>정렬 - Alignment</h2>

<div class="flock" id="alignmentDemo" style="float:right;"></div>

<p>각 보이드는 주변의 보이드와 같은 방향을 향하려는 특성도 가지고 있다. 응집도와 비슷하게 <code>NEIGHBOUR_RADIUS</code>의 내에 들어온 주변 보이드들의 속도의 평균을 향한다. 속도는 방향과 크기를 가지고 있으므로 평균을 구하면 방향뿐만이 아니라 크기까지 평균이 된다. 따라서 주변 보이드의 속력이 빠를 수록 정렬되려는 힘도 커진다.</p>

<p>옆의 예제에서 보면 역시 분홍색 보이드의 정보가 보인다. 녹색 원 안에 녹색 보이드가 주변 보이드로 선정된 녀석들이고 주변 보이드의 속도는 녹색 화살표로 표시된다. 이 녹색 화살표의 평균이 분홍색 보이드의 연녹색 화살표이다. 검은색 화살표는 분홍색 보이드의 현재 속도이다. 분홍색 보이드는 다음 프레임에서 자신의 위치와 방향을 결정할 때 연녹색 화살표의 값을 이용한다. </p>

<div style="clear:right"></div>

<h3>코드</h3>

<p>이번 코드는 그리 길지 않다. 로직은 응집도 계산과 똑같다. 다만 위치의 평균이 아니라 속도의 평균인 점이 다르다. 물론 이번에도 최대값이 있어서 너무 커다란 값이 되지 않도록 조정한다.</p>
<pre><code class="lang-coffeescript"><span class="class"><span class="keyword">class</span> <span class="title">Boid</span></span>

  <span class="comment"># Alignment component for the frame's acceleration</span>
  align: (neighbours) -&amp;gt;
    mean = <span class="keyword">new</span> Vector
    count = <span class="number">0</span>
    <span class="keyword">for</span> boid <span class="keyword">in</span> neighbours
      d = <span class="property">@location</span>.distance(boid.location)
      <span class="keyword">if</span> d &amp;gt; <span class="number">0</span> <span class="keyword">and</span> d &amp;lt; NEIGHBOUR_RADIUS
        mean.add(boid.velocity)
        count++

    mean.divide(count) <span class="keyword">if</span> count &amp;gt; <span class="number">0</span>
    mean.limit(MAX_FORCE)
    <span class="keyword">return</span> mean
</code></pre>
<h2>분리 - Separation</h2>

<div class="flock" id="separationDemo" style="float:right;"></div>

<p>각 보이드들은 너무 가까워지지 않으려는 경향이 있다. 보이드는 일정 공간을 두어 그 안으로 다른 보이드가 들어오면 그 보이드의 반대편으로 힘이 작용하여 멀어진다. 그 개인적인 공간은 <code>DESIRED_SEPARATION</code>이 결정하고 이 값은 <code>NEIGHBOUR_RADIUS</code>보다 작아야 한다. 만약 이 값이 <code>NEIGHBOUR_RADIUS</code>보다 크다면 이웃은 사라지고 모든 보이드를 배척하게 된다.</p>

<p>이번 예제는 빨간 원이 하나 더 생겼다. 이것이 <code>DESIRED_SEPARATION</code>값으로 결정된 생긴 개인 공간이고 이 안에 들어온 보이드는 빨간색으로 표시된다. 그리고 빨간 원 안으로 들어온 보이드에 의해 빨간 화살표로 멀어지려는 힘이 계산된다. 그 방향을 빨간 보이드의 반대 방향이 된다.</p>

<div style="clear:right"></div>

<h3>코드</h3>

<p>코드를 보면 주변 보이드들과의 거리를 검사해서 <code>DESIRED_SEPARATION</code>보다 가까운 보이드와 거리를 정규화해서 평균을 낸다. 그 중간에 정규화된 벡터를 자신과 주변 보이드간의 거리에 반비례하게 크기를 변경한다. 이는 가까이 있을수록 더 빨리 멀어지고 싶어한다는 개념을 넣은 것이다.</p>
<pre><code class="lang-coffeescript"><span class="class"><span class="keyword">class</span> <span class="title">Boid</span></span>

  <span class="comment"># Separation component for the frame's acceleration</span>
  separate: (neighbours) -&amp;gt;
    mean = <span class="keyword">new</span> Vector
    count = <span class="number">0</span>
    <span class="keyword">for</span> boid <span class="keyword">in</span> neighbours
      d = <span class="property">@location</span>.distance(boid.location)
      <span class="keyword">if</span> d &amp;gt; <span class="number">0</span> <span class="keyword">and</span> d &amp;lt; DESIRED_SEPARATION
        <span class="comment"># Normalized, weighted by distance vector pointing away from the neighbour</span>
        mean.add Vector.subtract(<span class="property">@location</span>,boid.location).normalize().divide(d)
        count++

    mean.divide(count) <span class="keyword">if</span> count &amp;gt; <span class="number">0</span>
    mean
</code></pre>
<h2>죄다 합쳐보자</h2>

<p>위에서 계산했던 세 가지 행동 요소들을 이용해서 무리를 움직이게 하려면 아래와 같이 하면 된다. 보이드 클래스에 자신을 그리는 <code>render</code>메서드를 넣고 이 보이드의 무리를 만들어서 움직일 <code>flock</code>이라는 함수를 만들어 ProcessingJS의 인스턴스에 넘겨준다. <code>flock</code>에서는 보이드를 만들어 각 보이드의 <code>step</code>메서드와 <code>render</code>메서드를 넣어준다.</p>
<pre><code class="lang-coffeescript"><span class="class"><span class="keyword">class</span> <span class="title">Boid</span></span>
  r: <span class="number">2</span> <span class="comment"># "radius" of the triangle</span>
  render: () -&amp;gt;
    <span class="comment"># Draw a triangle rotated in the direction of velocity</span>
    theta = <span class="property">@velocity</span>.heading() + <span class="property">@p</span>.radians(<span class="number">90</span>)
    <span class="property">@p</span>.fill(<span class="number">70</span>)
    <span class="property">@p</span>.stroke(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>)
    <span class="property">@p</span>.pushMatrix()
    <span class="property">@p</span>.translate(<span class="property">@location</span>.x,<span class="property">@location</span>.y)
    <span class="property">@p</span>.rotate(theta)
    <span class="property">@p</span>.beginShape(<span class="property">@p</span>.TRIANGLES)
    <span class="property">@p</span>.vertex(<span class="number">0</span>, -<span class="number">1</span> * <span class="property">@r</span> *<span class="number">2</span>)
    <span class="property">@p</span>.vertex(-<span class="number">1</span> * <span class="property">@r</span>, <span class="property">@r</span> * <span class="number">2</span>)
    <span class="property">@p</span>.vertex(<span class="property">@r</span>, <span class="property">@r</span> * <span class="number">2</span>)
    <span class="property">@p</span>.endShape()
    <span class="property">@p</span>.popMatrix()

<span class="comment"># flock function, passed the Processing instance by Processing itself</span>
flock = (processing) -&amp;gt;
  start = <span class="keyword">new</span> Vector(processing.width<span class="regexp">/2,processing.height/</span><span class="number">2</span>)

  <span class="comment"># Instantiate 100 boids who start in the middle of the map, have a maxmimum </span>
  <span class="comment"># speed of 2, maximum force of 0.05, and give them a reference to the </span>
  <span class="comment"># processing instance so they can render themselves.</span>
  boids = <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0.</span><span class="number">.100</span>]
    <span class="keyword">new</span> Boid(start, <span class="number">2</span>, <span class="number">0.05</span>, processing)

  processing.draw = -&amp;gt;
    processing.background(<span class="number">255</span>)
    <span class="keyword">for</span> boid <span class="keyword">in</span> boids
      boid.step(boids)
      boid.render()
    <span class="literal">true</span>

canvas = $(<span class="string">'&amp;lt;canvas width="550" height="550"&amp;gt;&amp;lt;/canvas&amp;gt;'</span>).appendTo($(<span class="string">'#flockingDemo'</span>))[<span class="number">0</span>]
processingInstance = <span class="keyword">new</span> Processing(canvas, flock)
</code></pre>
<p>여기서 보이는 <code>flock</code>함수는 보이드의 <code>flock</code> 메서드와는 다르다. 위에 코드가 있지만 난 친절하니까 밑에 다시 코드를 적어주겠다.</p>
<pre><code class="lang-coffeescript">flock: (neighbours) -&amp;gt;
  separation = <span class="keyword">this</span>.separate(neighbours).multiply(SEPARATION_WEIGHT)
  alignment = <span class="keyword">this</span>.align(neighbours).multiply(ALIGNMENT_WEIGHT)
  cohesion = <span class="keyword">this</span>.cohere(neighbours).multiply(COHESION_WEIGHT)
  <span class="keyword">return</span> separation.add(alignment).add(cohesion)
</code></pre>
<p>자 이것이 보이드의 <code>flock</code>메서드이다. 보이드의 것은 세 가지 행동 요소(분리, 정렬, 응집)를 이용해 가속도로 사용할 값을 계산하는 것이다. 각 요소 값을 계산하고 그것을 그대로 쓰는 것이 아니라 그 것이 가속도에 끼칠 영향도(weight)를 곱해준다. 그 값은 각각 <code>SEPARATION_WEIGHT</code>, <code>ALIGNMENT_WEIGHT</code>, <code>COHESION_WEIGHT</code>이다. 보이드의 <code>flock</code>메서드는 각 요소에 영향도를 곱해서 전부 더한다. 그게 끝이다.
전체 코드는 <a href="https://github.com/hornairs/blog/tree/master/assets/coffeescripts/flocking">여기</a>에서 구할 수 있다.</p>

<h2>변칙</h2>

<h3>다른 이웃</h3>

<p>여기까지가 기본적인 플로킹 알고리즘이었다. 지금까지는 주변 보이드를 계산할 때 그냥 주변을 360도를 전부 검사했다. 하지만 만약 보이드가 인간이나 동물의 추상체라면 자신의 주변은 관찰 가능한 곳에 있는, 또는 눈에 보이는 보이드로 한정될 것이다. 따라서 주변 보이드를 계산할 때 자신의 뒤쪽은 배제할 수도 있다. 또는 정말 시야에 들어오는 보이드만을 이웃으로 규정할 수도 있다. 이런 이웃을 계산하는 방법에 따라 많은 변칙이 가능해진다.
공간에서 이웃은 위치상의 근접 개체이지만 다른 문제로 환원하면 논리적 근접을 다시 정의해야 한다. 예를 들어 만약 소셜 네트워크라면 이웃은 자신의 친구나 친구가 공유한 다른 친구로 될 것이다. 웹 사이트라면 직접 링크한 문서들을 이웃으로 정할 수도 있겠다.</p>

<h3>영향도 수정</h3>

<p>글에는 세 행동 요소들에 적용되는 영향도 값을 적어놓진 않았지만, 이 영향도 값들을 수정함으로써 보이드들이 다른 행동 양식을 보이도록 할 수도 있다.</p>

<h3>장애물 피하기</h3>

<p>위 데모가 진행되는 동안 마우스를 보이드로 가져다 대면 그들이 마우스 포인터를 휙휙 피하는 모습을 관찰할 수 있다. 아예 갈 수 없는 곳을 피하기도 하는데 이에 대한 설명은 글에서 하지 않았다. 공부를 더 해야 하지만 단순히 추측해보자면 특정 반경 안에 장애물이 감지되거나 장에물과 보이드가 충돌하면 속도를 줄이거나 멈추고 장애물이 없는 방향으로 속도를 올리는 것으로 생각된다. 장애물이 단순 벽일 때, 각이 있는 모서리 일 때, ㄷ자 형태의 벽일 때에 따라 장애물을 피해서 다시 빠져나갈 방법을 잘 설계해야 한다. 잘못하면 아마 벽에 무한으로 부히는 상황이 올지도 모른다.</p>

<h2>마무리</h2>

<p>이 글은 그냥 개인적으로 관심 있던 분야의 글이 뉴스 사이트에 올라왔고 호기심에 읽어본 글이 어쩌다 보니 이해되어 쓴 글이다. 이 모델을 어디에 사용할지는 아직 나도 모르겠지만 군체의 움직임이 예쁘게 모델링 되어있어 소개한다. 사실 예쁘게 모델링 되었다는게 정확한 모델링이라는 것과는 다른 말이지만 더 정교한 알고리즘의 기반 지식이라도 될까 기대해본다.</p>

<script type="text/javascript">
  var Harry = {};
</script>

<script src="/articles/2012/flocking-algorithm/js/processing.js" type="text/javascript"></script>

<script src="/articles/2012/flocking-algorithm/js/vector.js" type="text/javascript"></script>

<script src="/articles/2012/flocking-algorithm/js/boid.js" type="text/javascript"></script>

<script src="/articles/2012/flocking-algorithm/js/flock.js" type="text/javascript"></script>

<script src="/articles/2012/flocking-algorithm/js/flocking.js" type="text/javascript"></script>
]]>
</content></entry><entry><title><![CDATA[ Git: rerere ]]></title><link href="http://dogfeet.github.com/articles/2012/git-rerere.html" /><updated>2012-11-22T00:00:00.000Z</updated><id>http://dogfeet.github.com/articles/2012/git-rerere.html</id><content type="html"><![CDATA[
<p>왠지 &lsquo;거꾸로 해도 이효리'가 떠오르는 이 이름, 명령어는 외우기는 쉽지만, 용법을 이해하는 데는 공을 좀 들여야 한다.</p>

<p>어떤 Topic 브랜치는 오랫동안 Merge하지 않고 유지하기도 한다. 이런 Topic 브랜치를 Merge하면 Conflict가 날 확률이 높다. Conflict가 예상되는 브랜치를 Merge할 때 <code>git rerere</code> 명령으로 난관을 극복하는 방법을 알아보자.</p>

<p><img src="http://dogfeet.github.com/articles/2012/git-rerere/overcome.jpg" alt="overcome"></p>

<p>이 글은 <a href="http://git-scm.com/2010/03/08/rerere.html">Rerere your boat&hellip;</a>을 주로 참고 했다. 내용은 거의 같다.</p>

<h2>rerere(Reuse Recorded Resolution)</h2>

<p><code>rerere</code>는 간단히 말하자면 Conflict를 해결한 Resolution을 저장해두고 같은 Conflict가 나면 저장한 Resolution을 재사용하는 명령이다.</p>

<p>Conflict가 발생하면 우선 conflict를 해결한 다음에, 다시 Merge하기 전으로 돌아와서 다시 Merge하면 저장된 Resolution이 적용돼서 Conflict 없이 자동으로 Merge된다.</p>

<p>어떻게 보면 말장난 같아 보일 수도 있다. Conflict를 Resolve하는 실험을 하고 실험에 성공하면 수동으로 그 실험을 재현해서 적용한다. 실패하면 다시 처음으로 돌아와 다시 시도한다. 그런데 이때 성공한 실험 내용을 기록해 뒀다가 자동으로 다시 적용하면 매우 편리할 것이다. <strong><code>rerere</code> 옵션을 켜면 Conflict를 Resolve하는데 성공하면 그 내용을 자동으로 저장해주고 같은 일을 다시 시도하면 git이 자동으로 재현해준다.</strong></p>

<p>그러면 이 명령어 어떻게 동작하는지 예제와 함께 살펴보자.</p>

<h3>설정</h3>

<p><code>rerere</code> 기능은 설정해야 사용할 수 있다:</p>
<pre><code><span class="comment">%</span> <span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">global</span> <span class="comment">rerere</span>.<span class="comment">enabled</span> <span class="comment">1</span>
</code></pre>
<p>각 저장소에 <code>.git/rr-cache</code> 디렉토리를 만들어도 이 기능이 켜지지만, 그냥 <code>--global</code>에 설정하자.</p>

<h3>Hello World</h3>

<p><code>hello.js</code> 프로그램 하나인 프로젝트가 있다. master 브랜치의 <code>hello.js</code> 프로그램은 아래와 같다:</p>
<pre><code class="lang-javascript">#!<span class="regexp">/usr/</span>bin/env node

console.log( <span class="string">'hello world'</span>)
</code></pre>
<p>그리고 아래와 같이 프로젝트를 진행한다. master 브랜치의 메시지를 'hola world'로 변경하고 i18n-world 브랜치의 메시지는 'hello mundo'로 변경한다:</p>

<p><img src="/articles/2012/git-rerere/rerere1.png" alt="rerere1"></p>

<p>이 상태에서 Merge를 하면 Conflict가 난다. 이 예제의 Conflict는 너무 간단해서 Recorded Resolution이 필요하지 않지만 <code>rerere</code>를 설명하기에는 더없이 좋은 예다.</p>

<h3>Recored Resolution 만들기</h3>

<p><a href="https://twitter.com/chacon">@chacon</a>님은 쓴 원래 글에서는 Conflict를 해결하는 브랜치에 바로 Merge하는 방법으로 Resolution을 만들었다. 그리고 Reset한 후에 다시 Merge해서 Resolution을 저장했다. 이 글에서는 detached HEAD를 이용하는 방법을 설명한다. 뭐 결과는 같지만 난 이 방법이 더 좋다.</p>

<p>먼저 detached HEAD 상태로 만든다:</p>
<pre><code>% git checkout HEAD^0
Note: checking out 'HEAD^0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and <span class="operator"><span class="keyword">commit</span> them, <span class="keyword">and</span> you can discard <span class="keyword">any</span> commits you make <span class="keyword">in</span> this
state without impacting <span class="keyword">any</span> branches <span class="keyword">by</span> performing another checkout.

If you want <span class="keyword">to</span> <span class="keyword">create</span> a new branch <span class="keyword">to</span> retain commits you <span class="keyword">create</span>, you may
<span class="keyword">do</span> so (now <span class="keyword">or</span> later) <span class="keyword">by</span> <span class="keyword">using</span> -b <span class="keyword">with</span> the checkout command again. Example:

  git checkout -b new_branch_name

HEAD <span class="keyword">is</span> now <span class="keyword">at</span> <span class="number">7</span>d71bbe... hola world
</code></pre>
<p>master 브랜치가 가리키는 <code>7d71bbe</code>를 checkout 했기 때문에 워킹 디렉토리 내용은 master 브랜치와 같다. 단지 'detached HEAD&rsquo; 상태인 것만 다르다. 그래서 여기서 커밋을 하면 &lsquo;detached HEAD&rsquo; 상태로 커밋된다. master 브랜치는 움직이지 않는다.</p>

<p>그러면 여기서 Merge한다:</p>
<pre><code>% git merge i18n-world
Auto-merging hello.js
CONFLICT (content): Merge conflict <span class="keyword">in</span> hello.js
Recorded preimage <span class="keyword">for</span> 'hello.js'
Automatic merge failed; fix conflicts <span class="keyword">and</span> <span class="keyword">then</span> commit <span class="keyword">the</span> <span class="constant">result</span>.
</code></pre>
<p>보통 Conflict 날 때의 상황과 다르게 &ldquo;Recorded preimage for &lsquo;hello.js&rsquo;&rdquo; 라는 메시지를 추가로 보여준다. <code>rerere</code>를 켰기 때문에 생겼다.</p>

<p><code>git status</code>는 Conflict가 있다고 아래와 같이 알려준다:</p>
<pre><code>% git status
<span class="preprocessor"># Not currently on any branch.</span>
<span class="preprocessor"># Unmerged paths:</span>
<span class="preprocessor">#   (use "git add/rm &lt;file&gt;..." as appropriate to mark resolution)</span>
<span class="preprocessor">#</span>
<span class="preprocessor">#       both modified:      hello.js</span>
<span class="preprocessor">#</span>
no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)
</code></pre>
<p><code>git diff</code>라고 실행하면 어느 부분에서 Conflict가 난 것인지 보여준다:</p>
<pre><code><span class="comment">diff</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">cc</span> <span class="comment">hello</span>.<span class="comment">js</span>
<span class="comment">index</span> <span class="comment">68d2f27</span>,<span class="comment">2c3b5e5</span>.<span class="string">.</span><span class="comment">0000000</span>
<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">a/hello</span>.<span class="comment">js</span>
<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">b/hello</span>.<span class="comment">js</span>
<span class="comment">@@@</span> <span class="literal">-</span><span class="comment">1</span>,<span class="comment">4</span> <span class="literal">-</span><span class="comment">1</span>,<span class="comment">4</span> <span class="literal">+</span><span class="comment">1</span>,<span class="comment">8</span> <span class="comment">@@@</span>
  <span class="comment">#!/usr/bin/env</span> <span class="comment">node</span>

<span class="literal">+</span><span class="literal">+</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="comment">ours</span>
 <span class="literal">+</span><span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hola</span> <span class="comment">world')</span>
<span class="literal">+</span><span class="literal">+</span><span class="comment">=======</span>
<span class="literal">+</span> <span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hello</span> <span class="comment">mundo')</span>
<span class="literal">+</span><span class="literal">+</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="comment">theirs</span>
</code></pre>
<p>이제 &lsquo;hello.js&rsquo; 파일을 편집해서 &lsquo;hola mundo'로 Conflict를 해결하고 저장한다. 아직 Resolve를 Mark하지 않은 상태에서 <code>git diff</code>를 실행하면 아래와 같이 나온다:</p>
<pre><code><span class="comment">diff</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">cc</span> <span class="comment">hello</span>.<span class="comment">js</span>
<span class="comment">index</span> <span class="comment">68d2f27</span>,<span class="comment">2c3b5e5</span>.<span class="string">.</span><span class="comment">0000000</span>
<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">a/hello</span>.<span class="comment">js</span>
<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">b/hello</span>.<span class="comment">js</span>
<span class="comment">@@@</span> <span class="literal">-</span><span class="comment">1</span>,<span class="comment">4</span> <span class="literal">-</span><span class="comment">1</span>,<span class="comment">4</span> <span class="literal">+</span><span class="comment">1</span>,<span class="comment">4</span> <span class="comment">@@@</span>
  <span class="comment">#!/usr/bin/env</span> <span class="comment">node</span>

<span class="literal">-</span> <span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hola</span> <span class="comment">world')</span>
 <span class="literal">-</span><span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hello</span> <span class="comment">mundo')</span>
<span class="literal">+</span><span class="literal">+</span><span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hola</span> <span class="comment">mundo')</span>
</code></pre>
<p>이 명령은 'hola world'가 'hello mundo'와 Merge돼서 'hola mundo'가 되는 거라고 보여준다. 그런데 웬걸 <code>git add</code> 명령으로 Resolution을 Mark하면 <code>git diff</code> 명령은 더는 이런 메시지를 보여주지 않는다. 대신 <code>git rerere diff</code>를 사용해야 한다:</p>
<pre><code><span class="header">--- a/hello.js</span>
<span class="header">+++ b/hello.js</span>
<span class="chunk">@@ -1,8 +1,4 @@</span>
 #!/usr/bin/env node

<span class="deletion">-&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>
<span class="deletion">-console.log( 'hello mundo')</span>
<span class="deletion">-=======</span>
<span class="deletion">-console.log( 'hola world')</span>
<span class="deletion">-&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>
<span class="addition">+console.log( 'hola mundo')</span>
</code></pre>
<p>Resolution은 다 만들었고 이제 커밋한다:</p>
<pre><code>% git commit -m '<span class="keyword">sample</span> resolution'
Recorded resolution <span class="keyword">for</span> 'hello.js'.
[detached HEAD f35bf55] <span class="keyword">sample</span> resolution
</code></pre>
<p>&ldquo;Recorded resolution for 'hello.js&rsquo;&quot;라는 메시지는 Resolution이 저장됐음을 보여주는 것이고 &quot;detached HEAD&quot;는 detached HEAD 상태에서 커밋했기 때문에 보여주는 것이다.</p>

<p>이제 Resolution은 다 만들었다. Conflict를 해결하는 실험을 성공적으로 마친 것이다. 이 실험 결과를 실전에 적용해보자.</p>

<h2>rerere</h2>

<p>i18n-world를 master로 Merge하기 전에 i18n-world를 Rebase한다. 먼저 i18n-world를 Checkout한다:</p>
<pre><code>% git co i18n-world
Warning: you are leaving 1 <span class="operator"><span class="keyword">commit</span> behind, <span class="keyword">not</span> connected <span class="keyword">to</span>
<span class="keyword">any</span> <span class="keyword">of</span> your branches:

  f35bf55 sample resolution

If you want <span class="keyword">to</span> keep them <span class="keyword">by</span> creating a new branch, this may be a good <span class="keyword">time</span>
<span class="keyword">to</span> <span class="keyword">do</span> so <span class="keyword">with</span>:

 git branch new_branch_name f35bf550d886286e5e75569fb9597c664cd7743d

Switched <span class="keyword">to</span> branch <span class="string">'i18n-world'</span>
</code></pre>
<p>detached HEAD에서 벗어난다는 경고 메시지를 보여준다. 그리고 Rebase한다:</p>
<pre><code>% git rebase master
First, rewinding head <span class="keyword">to</span> replay your work <span class="function_start"><span class="keyword">on</span> <span class="title">top</span></span> <span class="keyword">of</span> <span class="keyword">it</span>...
Applying: hello mundo
Using index info <span class="keyword">to</span> reconstruct a base tree...
Falling <span class="keyword">back</span> <span class="keyword">to</span> patching base <span class="keyword">and</span> <span class="number">3</span>-way merge...
Auto-merging hello.js
CONFLICT (content): Merge conflict <span class="keyword">in</span> hello.js
Resolved 'hello.js' using previous resolution.
Failed <span class="keyword">to</span> merge <span class="keyword">in</span> <span class="keyword">the</span> changes.
Patch failed <span class="keyword">at</span> <span class="number">0001</span> hello mundo

When you have resolved this problem <span class="command">run</span> <span class="string">"git rebase --continue"</span>.
If you would prefer <span class="keyword">to</span> skip this patch, instead <span class="command">run</span> <span class="string">"git rebase --skip"</span>.
To check out <span class="keyword">the</span> original branch <span class="keyword">and</span> stop rebasing <span class="command">run</span> <span class="string">"git rebase --abort"</span>.
</code></pre>
<p>&quot;Resolved &lsquo;hello.js&rsquo; using previous resolution&rdquo; 메시지가 추가돼 있다. 편집기로 hello.js를 열어보면 좀 전에 만들었던 Resolution대로 파일이 Resolve됐음을 알 수 있다. <code>git diff</code> 명령으로 차이를 확인할 수 있다:</p>
<pre><code><span class="comment">%</span> <span class="comment">git</span> <span class="comment">diff</span>
<span class="comment">diff</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">cc</span> <span class="comment">hello</span>.<span class="comment">js</span>
<span class="comment">index</span> <span class="comment">68d2f27</span>,<span class="comment">2c3b5e5</span>.<span class="string">.</span><span class="comment">0000000</span>
<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">a/hello</span>.<span class="comment">js</span>
<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">b/hello</span>.<span class="comment">js</span>
<span class="comment">@@@</span> <span class="literal">-</span><span class="comment">1</span>,<span class="comment">4</span> <span class="literal">-</span><span class="comment">1</span>,<span class="comment">4</span> <span class="literal">+</span><span class="comment">1</span>,<span class="comment">4</span> <span class="comment">@@@</span>
  <span class="comment">#!/usr/bin/env</span> <span class="comment">node</span>

<span class="literal">-</span> <span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hola</span> <span class="comment">world')</span>
 <span class="literal">-</span><span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hello</span> <span class="comment">mundo')</span>
<span class="literal">+</span><span class="literal">+</span><span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hola</span> <span class="comment">mundo')</span>
</code></pre>
<p><img src="/articles/2012/git-rerere/rerere3.png" alt="rerere1"></p>

<p>그러면 이 상태에서 Resolution을 Mark하고 <code>git rebase --continue</code>를 실행하면 Rebase가 완료된다. 아래와 같이 실행한다:</p>
<pre><code><span class="preprocessor"># git add .</span>
<span class="preprocessor"># git rebase --continue</span>
Applying: hello mundo
</code></pre>
<p><code>rerere</code>를 이용한 Merge를 마쳤다. &lsquo;detached HEAD&rsquo; 상태를 만들어서 Conflict를 해결하는 실험을 하고 Resolution을 만들어 놓는다. 그다음에 다시 Merge를 하면 만들어 놓은 Resolution이 재사용된다. 그래서 명령어 이름이 &lsquo;rerere(REuse REcorded REsolution)'이다.</p>

<h3>Resolution을 재사용하지 않기</h3>

<p>Resolution을 Mark하기 전으로 돌아가 보자. <code>git rebase master</code>를 실행하면 자동으로 저장된 Resolution이 적용된다. 그 상태로 돌아가서 <code>git diff</code>를 실행하면 결과는 아래와 같다:</p>
<pre><code><span class="comment">%</span> <span class="comment">git</span> <span class="comment">diff</span>
<span class="comment">diff</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">cc</span> <span class="comment">hello</span>.<span class="comment">js</span>
<span class="comment">index</span> <span class="comment">68d2f27</span>,<span class="comment">2c3b5e5</span>.<span class="string">.</span><span class="comment">0000000</span>
<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">a/hello</span>.<span class="comment">js</span>
<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span> <span class="comment">b/hello</span>.<span class="comment">js</span>
<span class="comment">@@@</span> <span class="literal">-</span><span class="comment">1</span>,<span class="comment">4</span> <span class="literal">-</span><span class="comment">1</span>,<span class="comment">4</span> <span class="literal">+</span><span class="comment">1</span>,<span class="comment">4</span> <span class="comment">@@@</span>
  <span class="comment">#!/usr/bin/env</span> <span class="comment">node</span>

<span class="literal">-</span> <span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hola</span> <span class="comment">world')</span>
 <span class="literal">-</span><span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hello</span> <span class="comment">mundo')</span>
<span class="literal">+</span><span class="literal">+</span><span class="comment">console</span>.<span class="comment">log(</span> <span class="comment">'hola</span> <span class="comment">mundo')</span>
</code></pre>
<p>여기서 git이 자동으로 적용해준 Resolution이 마음에 들지 않으면 다시 Conflict 파일을 생성할 수 있다:</p>
<pre><code>% git checkout --conflict=merge hello.j
% cat hello.js
#!<span class="regexp">/usr/</span>bin/env node

&lt;<span class="xml"><span class="tag">&lt;<span class="title">&lt;&lt;&lt;&lt;&lt;</span> <span class="attribute">ours</span>
<span class="attribute">console.log</span>( '<span class="attribute">hola</span> <span class="attribute">world</span>')
=<span class="value">======</span>
<span class="attribute">console.log</span>( '<span class="attribute">hello</span> <span class="attribute">mundo</span>')
&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt; theirs
</span></code></pre>
<p><code>--conflict</code> 옵션은 Conflict를 해결할 때 사용하면 유용하다. <code>merge</code> 대신 <code>diff3</code>를 사용하면 base Commit의 것도 알 수 있다. Checkout명령은 <code>.git</code> 데이터베이스에 들어 있는 내용을 워킹 디렉토리로 복사하는 명령이다. 이 명령을 실행하면 충돌이 표시된 hello.js파일이 워킹 디렉토리에 생성된다:</p>
<pre><code>% git checkout --conflict=diff3 hello.js
% cat hello.js
#!<span class="regexp">/usr/</span>bin/env node

&lt;<span class="xml"><span class="tag">&lt;<span class="title">&lt;&lt;&lt;&lt;&lt;</span> <span class="attribute">ours</span>
<span class="attribute">console.log</span>( '<span class="attribute">hola</span> <span class="attribute">world</span>')
||||||| <span class="attribute">base</span>
<span class="attribute">console.log</span>( '<span class="attribute">hello</span> <span class="attribute">world</span>')
=<span class="value">======</span>
<span class="attribute">console.log</span>( '<span class="attribute">hello</span> <span class="attribute">mundo</span>')
&gt;</span>&gt;&gt;&gt;&gt;&gt;&gt; theirs
</span></code></pre>
<p>이제 원하는 데로 편집하고 <code>git add .;git rebase --continue</code> 명령을 실행하면 Rebase는 완료된다. 하지만, 저장해둔 Resolution을 다시 적용하고 싶어지면 아래와 같이 복원한다:</p>
<pre><code>% git rerere
Resolved <span class="string">'hello.js'</span> <span class="keyword">using</span> previous resolution.
% cat hello.js
<span class="preprocessor">#!/usr/bin/env node</span>

console.log( <span class="string">'hola mundo'</span>)
</code></pre>
<p>Conflict를 다시 해결했으니 계속 진행해서 Rebate를 완료한다:</p>
<pre><code><span class="preprocessor"># git add .</span>
<span class="preprocessor"># git rebase --continue</span>
Applying: hello mundo
</code></pre>
<p>이상으로 <code>rerere</code> 명령에 대해 알아보았다.</p>

<h2>참고</h2>

<ul>
<li><a href="http://www.kernel.org/pub/software/scm/git/docs/git-rerere.html">git-rerere</a></li>
<li><a href="http://git-scm.com/2010/03/08/rerere.html">Rerere your boat&hellip;</a></li>
<li><a href="http://gitster.livejournal.com/41795.html">Fun with rerere</a></li>
</ul>
]]>
</content></entry><entry><title><![CDATA[ GitHub의 페이지 기능 이용하기 ]]></title><link href="http://dogfeet.github.com/articles/2012/github-pages.html" /><updated>2012-10-10T00:00:00.000Z</updated><id>http://dogfeet.github.com/articles/2012/github-pages.html</id><content type="html"><![CDATA[
<p>GitHub의 Pages 기능을 이용하는 방법에 대해 정리해보고자 한다. <a href="https://twitter.com/pismute">@pismute</a>님의 &lsquo;한 때 버전 컨트롤, 위키, 블로그를 다 따로 사용했었는데, GitHub를 알고 나서 Git, GitHub으로만 사용하고 있다'는 말을 듣고 블로깅을 GitHub로 해보면 어떨까 하는 생각이 들었다. GitHub의 Page 기능을 이용하면 이 블로그처럼 글을 써서 남길 수 있다.
GitHub의 <a href="https://help.github.com/categories/20/articles">help 페이지에 있는 Pages의 글</a> 들중 몇 가지만 빼고 한국어로 옮겨봤다.</p>

<p><img src="http://dogfeet.github.com/articles/2012/github-pages/github-help.jpg" alt="help"></p>

<h2>1. GitHub의 Pages란?</h2>

<p>GitHub의 Pages란(이하 페이지) GitHub에서 무료로 호스팅하는 공개 웹페이지이다. GitHub에서 제공하는 페이지 제작 도구로 쉽게 페이지를 만들어 공개할 수도 있고, 로컬에서 git을 이용해 수동으로 만들 수도 있다.</p>

<h2>2. 사용자와 프로젝트를 위한 페이지</h2>

<p>우리는 두 가지 타입의 페이지를 만들 수 있다. 사용자 페이지와 프로젝트 페이지가 그것이다. 이 둘은 몇 가지 사항을 빼고는 거의 똑같다. (역자주 : 원문에는 User, Organization and Project Page라고 나와있다. 하지만 User와 Organization을 나누는 것은 계정을 혼자 사용하느냐 여럿이서 사용하느냐에 따른 차이일 뿐이다. 사용 방법에는 아무런 차이가 없으므로 이 글에서는 뭉쳐서 사용자라고만 표기한다.)</p>

<h3>사용자 페이지</h3>

<p>사용자 페이지는 페이지만을 위한 특별한 저장소에 저장한다. 이 저장소의 이름은 계정 이름을 사용한다. 만약 계정이 dogfeet라면 이 조직을 위한 저장소의 이름은 <a href="https://github.com/dogfeet/dogfeet.github.com">dogfeet/dogfeet.github.com</a> 이 된다.</p>

<ul>
<li>저장소의 이름은 반드시 <code>username/username.github.com</code>의 구조를 가진다.</li>
<li><strong>master</strong> 브랜치의 내용이 곧 페이지에서 보이는 내용이다.</li>
</ul>

<blockquote>
<p><strong>알아둘 것</strong>: 사용자 페이지의 저장소는 반드시 그 자신의 계정 이름밖에 사용하지 못한다. 다시 말해서 <code>joe/bob.github.com</code>식의 저장소는 페이지로 작동하지 않는다.</p>
</blockquote>

<h3>프로젝트 페이지</h3>

<p>사용자 페이지와는 다르게 <strong>프로젝트 페이지</strong>는 그 프로젝트의 저장소를 그대로 사용한다. (새로 저장소를 만들 필요 없다.) 그렇게 만들어진 페이지는 몇 가지를 제외하고 사용자 페이지와 완전히 똑같다.</p>

<ul>
<li>페이지를 만들거나 퍼블리싱 할 때에 <strong>gh-pages</strong> 브랜치를 사용한다.</li>
<li>커스텀 도메인을 사용하지 않으면 프로젝트 페이지는 사용자 페이지의 서브 경로로 제공된다. 주소는 <code>username.github.com/projectname</code>의 형태를 띈다.</li>
<li>커스텀 404 에러 페이지를 사용하려면 커스텀 도메인을 사용해야 한다. 커스텀 도메인을 사용하지 않으면 사용자 페이지의 404 에러 페이지를 사용하게 된다.</li>
</ul>

<h2>3. 자동으로 페이지 만들기</h2>

<p>프로젝트나 사용자의 페이지를 빠르게 만들려면 GitHub에서 제공하는 페이지 제작 도구를 이용한다.</p>

<h3>사용자 페이지</h3>

<p>사용자 페이지를 만들려면 우선 <code>username.github.com</code>이나 <code>orgname.github.com</code>이란 이름의 저장소를 만들어야 한다. 물론 여기서 username이나 orgname은 자기 자신의 github계정 이름이어야 한다. 그렇지 않으면 페이지는 만들어지지 않는다. 저장소의 admin 페이지에 가면 제작 도구를 사용할 수 있다.</p>

<h3>프로젝트 페이지</h3>

<p>모든 프로젝트 저장소에서 페이지를 만들고 퍼블리싱 할 수 있다. 하지만 주의할 것은 비공개 저장소에서 만든 페이지는 공개 페이지가 된다. (비공개 페이지를 만들 수 없다.)</p>

<h3>자동 페이지 제작 도구</h3>

<ol>
<li><p>저장소의 admin 페이지로 간다.</p>

<p><img src="/articles/2012/github-pages/repo-actions-admin.png" alt="repo-actions-admin"></p></li>
<li><p>&ldquo;Automatic Page Generator&rdquo; 버튼을 클릭한다.</p>

<p><img src="/articles/2012/github-pages/pages-automatic-page-generator.png" alt="pages-automatic-page-generator"></p></li>
<li><p>마크다운 에디터로 내용을 작성한다.</p></li>
<li><p>&ldquo;Continue To Layouts&rdquo; 버튼을 누른다.</p></li>
<li><p>제공되는 테마들을 적용해서 미리보기로 확인한다.</p>

<p><img src="/articles/2012/github-pages/page-generator-picker.png" alt="page-generator-picker"></p></li>
<li><p>좋아하는 테마를 발견했으면 &ldquo;Publish&quot;를 클릭한다.</p>

<p><img src="/articles/2012/github-pages/page-generator-publish.png" alt="page-generator-publish"></p></li>
</ol>

<p>페이지가 만들어진 후에 로컬에 복사본을 얻을 수 있다. 프로젝트 페이지를 만들었다면 새로운 브랜치를 fetch 후 checkout 한다.</p>
<pre><code><span class="char">$ </span>cd repo
<span class="char">$ </span>git fetch origin
<span class="method">remote:</span> <span class="class">Counting</span> <span class="method">objects:</span> <span class="number">92</span>, done.
<span class="method">remote:</span> <span class="class">Compressing</span> <span class="method">objects:</span> <span class="number">100</span>% (<span class="number">63</span>/<span class="number">63</span>), done.
<span class="method">remote:</span> <span class="class">Total</span> <span class="number">68</span> (delta <span class="number">41</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)
<span class="class">Unpacking</span> <span class="method">objects:</span> <span class="number">100</span>% (<span class="number">68</span>/<span class="number">68</span>), done.
<span class="class">From</span> <span class="method">https:</span>//github.com/user/repo.git
 * [new branch]      gh-pages     -&gt; origin/gh-pages

<span class="char">$ </span>git checkout gh-pages
<span class="class">Branch</span> gh-pages set up to track remote branch gh-pages from origin.
<span class="class">Switched</span> to a new branch <span class="string">'gh-pages'</span>
</code></pre>
<p>사용자 페이지를 만들었다면 페이지 코드는 gh-pages 브랜치가 아니라 master 브랜치에 페이지의 코드가 들어있다. 따라서 그냥 master 브랜치를 check out 한 뒤 pull 명령을 내리면 된다.</p>
<pre><code>$ cd repo
$ git checkout master
Switched to branch <span class="string">'master'</span>
$ git pull origin master
remote: Counting objects: <span class="number">92</span>, done.
remote: Compressing objects: <span class="number">100</span>% (<span class="number">63</span>/<span class="number">63</span>), done.
remote: Total <span class="number">68</span> (delta <span class="number">41</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)
Receiving objects: <span class="number">100</span>% (<span class="number">424</span>/<span class="number">424</span>), <span class="number">329.32</span> KiB | <span class="number">178</span> KiB/s, done.
Resolving deltas: <span class="number">100</span>% (<span class="number">68</span>/<span class="number">68</span>), done.
From https://github.com/user/repo.git
 * branch      master     -&gt; FETCH_HEAD
Updating abc1234..def5678
Fast-forward
index.html                                     |  <span class="number">265</span> ++++
<span class="keyword">...</span>
<span class="number">98</span> files changed, <span class="number">18123</span> insertions(+), <span class="number">1</span> deletion(-)
create mode <span class="number">100644</span> index.html
<span class="keyword">...</span>
</code></pre>
<h2>4. 수동으로 페이지 만들기</h2>

<p>git을 command-line으로 사용해왔다면 수동으로 새로운 페이지를 만드는 건 어렵지 않다.</p>

<h3>안전하게 가자</h3>

<p>프로젝트에 페이지를 만들어 넣으려면 저장소에 &quot;부모가 없는(orphan)&rdquo; 브랜치를 만들어야 한다. 이걸 하는 가장 안전한 방법은 우선 새로 저장소를 클론하는 것이다.</p>
<pre><code>git clone https://github.com/user/repo.git
Clone our repo

Cloning into <span class="string">'repo'</span><span class="keyword">...</span>
remote: Counting objects: <span class="number">2791</span>, done.
remote: Compressing objects: <span class="number">100</span>% (<span class="number">1225</span>/<span class="number">1225</span>), done.
remote: Total <span class="number">2791</span> (delta <span class="number">1722</span>), reused <span class="number">2513</span> (delta <span class="number">1493</span>)
Receiving objects: <span class="number">100</span>% (<span class="number">2791</span>/<span class="number">2791</span>), <span class="number">3.77</span> MiB | <span class="number">969</span> KiB/s, done.
Resolving deltas: <span class="number">100</span>% (<span class="number">1722</span>/<span class="number">1722</span>), done.
</code></pre>
<h3>이제 놀자!</h3>

<p>깨끗한 저장소를 손에 넣었다. 이제 새로운 브랜치를 만들고 작업 디렉토리와 인덱스의 모든 내용을 지워야 한다.</p>
<pre><code>$ cd repo

$ git checkout <span class="comment">--orphan gh-pages</span>
Creates our branch, without any parents (it<span class="attribute">'s</span> an orphan!)

Switched <span class="keyword">to</span> a <span class="keyword">new</span> branch <span class="attribute">'gh</span>-pages'

git rm -rf .
Remove <span class="keyword">all</span> files from the old working tree

rm '.gitignore'
</code></pre>
<blockquote>
<p><strong>알아둘 것</strong>: <code>gh-pages</code> 브랜치는 처음 커밋이 되기 전까지는 <code>git branch</code>의 브랜치 목록에 나타나지 않는다.</p>
</blockquote>

<p>비어있는 작업 디렉토리를 얻었다. 이 안에 내용을 채워넣고 GitHub로 푸시하면 된다. 예를 들자면 다음과 같다.</p>
<pre><code><span class="variable">$ </span>echo <span class="string">"My GitHub Page"</span> &gt; index.html
<span class="variable">$ </span>git add .
<span class="variable">$ </span>git commit -a -m <span class="string">"First pages commit"</span>
<span class="variable">$ </span>git push origin gh-pages
</code></pre>
<blockquote>
<p><strong>알아둘 것</strong>: 최초의 푸시를 한 뒤에 페이지가 보이기까지는 몇 분 정도 기다려야 한다.</p>
</blockquote>

<h2>5. Jekyll과 페이지</h2>

<p>일반적인 HTML 컨텐츠를 지원하는 차원에서 GitHub의 페이지는 <a href="https://github.com/mojombo/jekyll">Jekyll</a>을 지원한다. (역자주: '지킬 박사와 하이드'의 지킬이다.) Jekyll은 'Tom Preston-Werner'이 제작한 간단한 스태틱 사이트 제네레이터이다. Jekyll을 이용하면 웹사이트 전체에 적용되는 헤더, 푸터를 파일을 여러 번 복제하지 않고도 만들 수 있다. 블로그 기능이나 멋진 템플릿 기능들도 지원한다.</p>

<h3>Jekyll 사용하기</h3>

<p>GitHub의 모든 페이지는 Jekyll로 돌아간다. 일반 HTML 파일 또한 유효한 Jekyll 사이트이기 때문에 이미 가지고 있던 HTML 파일들을 수정하지 않아도 된다. 그냥 전부 HTML 파일이면 괜찮다. <a href="https://github.com/mojombo/jekyll/blob/master/README.textile">README</a>에 Jekyll의 기능들과 그 사용법이 적혀있다.</p>

<h3>Jekyll 설정하기</h3>

<p><code>_config.yml</code> 파일에 Jekyll의 대부분의 설정이 다 들어있다. 퍼머 링크의 스타일이나 마크다운 렌더러를 Maruku에서 RDiscount로 바꿀 수도 있다. 아래와 같은 옵션만 바꾸면 된다.</p>
<pre><code><span class="attribute">safe</span>: <span class="string">true</span>
<span class="attribute">source</span>: <span class="string">&lt;your pages repo&gt;</span>
<span class="attribute">destination</span>: <span class="string">&lt;the build dir&gt;</span>
<span class="attribute">lsi</span>: <span class="string">false</span>
<span class="attribute">pygments</span>: <span class="string">true</span>
</code></pre>
<h3>Troubleshooting</h3>

<p>사이트를 GitHub에 푸시 후에도 Jekyll 사이트가 보이지 않는다면 Jekyll을 로컬에서 돌려보면 여러 오류를 잡을 수 있다. 이 기능을 위해 GitHub에서 사용하는 것과 같은 버전의 Jekyll을 사용하길 바란다.</p>

<p>GitHub의 페이지 서버는 Jekyll 버전 0.11.0, Liquid 버전 2.2.2를 사용하고 다음 명령어로 실행을 시킨다.</p>
<pre><code><span class="comment">$</span> <span class="comment">jekyll</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">pygments</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">no</span>-<span class="comment">lsi</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">safe</span>
</code></pre>
<p>만약 GitHub에 푸시하고도 페이지가 만들어지지 않으면 '페이지가 안 보여요'가이드를 보라.</p>

<h4>Jekyll 끄기</h4>

<p>Jekyll을 그만 사용하려면 저장소의 루트에 <code>.nojekyll</code>이란 이름의 파일을 만들고 푸시하기만 하면 된다. </p>

<h3>기여하기</h3>

<p>Jekyll에 필요한 기능이 있으면 주저하지 말고 <a href="https://github.com/mojombo/jekyll">fork</a> 한 뒤에 풀 리퀘스트를 보내면 된다. 이런 건 언제든지 환영한다</p>

<h2>6. 페이지에 커스텀 도메인 설정하기</h2>

<p>GitHub의 페이지에 사용자가 지정하는 도메인 이름을 설정해줄 수 있다.</p>

<h3>저장소에 도메인 설정하기.</h3>

<p>우리가 가지고 있는 도메인이 <code>example.com</code>라 치고 이걸 우리 페이지에 연결해보자. GitHub에게 이 도메인으로 서비스해주세요~ 라고 말하는 건 쉽다. 페이지의 루트에 CNAME 이라는 파일을 하나 만들고 도메인 이름을 적어넣으면 된다.</p>
<pre><code><span class="filename">example.com
</code></pre>
<blockquote>
<p><strong>알아둘 것</strong>: 이 파일을 만들고 GitHub에서 페이지를 성공적으로 만들었다는 알림을 확인한 후에 다음 단계인 'DNS 세팅하기'를 시작해야 한다.</p>
</blockquote>

<p>만약 <strong>사용자 페이지</strong> 저장소에서 작업하고 있다면 이 일은 <strong>master</strong>브랜치에서 해야 하고 <strong>프로젝트 페이지</strong> 저장소라면 <strong>gh-pages</strong>브랜치에서 작업을 해야 한다.</p>

<blockquote>
<p><strong>알아둘 것</strong>: 하나의 페이지에는 하나의 커스텀 도메인만 할당할 수 있다. 만약 같은 페이지에 여러 도메인을 할당하고 싶다면 다른 도메인에서 당신의 페이지로 리다이렉트 해주는 서비스 등을 이용해야 할 것이다.</p>
</blockquote>

<h3>DNS 세팅하기</h3>

<p>다음은 DNS를 세팅할 차례이다. 세팅은 사용하는 도메인의 종류에 따라서 두 가지 방법으로 나눌 수 있다.</p>

<p>아, DNS 변경이 전 세계로 퍼지기까지는 약 하루가 걸린다. 인내를 가지고 기다려야 한다.</p>

<h4>Top-level 도메인 (TLD)</h4>

<p><code>example.com</code>과 같은 TLD은 <strong>A 레코드</strong>가 204.232.175.78를 가리키도록 해야 한다.</p>
<pre><code>$ dig example<span class="preprocessor">.com</span> +nostats +nocomments +nocmd
<span class="preprocessor"># Look up DNS record for example.com</span>
<span class="comment">;example.com.                    IN      A</span>
example<span class="preprocessor">.com</span>.             <span class="number">3259</span>    <span class="keyword">IN</span>      A       <span class="number">204.232</span><span class="number">.175</span><span class="number">.78</span>
</code></pre>
<blockquote>
<p><strong>경고</strong>: TLD에는 CNAME 레코드를 사용하면 안 된다. CNAME 레코드를 쓰면 해당 도메인의 다른 서비스들(예를 들면 이메일 같은)에 문제가 생길 수 있다.</p>
</blockquote>

<h4>서브 도메인</h4>

<p>서브 도메인을 할당하려면 <strong>CNAME 레코드</strong>로 사용자 페이지 서브 도메인을 가리키는게 최고다. 이 방법을 이용하면 GitHub 서버의 IP가 바뀌어도 자동으로 조정해준다. CNAME 레코드는 A 레코드 위에 쓸 수도 있다. 하지만 이 정보는 자동으로 업데이트 되지 않는다.</p>
<pre><code>$ dig <span class="transposed_variable">www.</span><span class="transposed_variable">example.</span>com +nostats +nocomments +nocmd
;<span class="transposed_variable">www.</span><span class="transposed_variable">example.</span><span class="transposed_variable">com.</span>                 IN      A
<span class="transposed_variable">www.</span><span class="transposed_variable">example.</span><span class="transposed_variable">com.</span>          <span class="number">3592</span>    IN      CNAME   <span class="transposed_variable">username.</span><span class="transposed_variable">github.</span><span class="transposed_variable">com.</span>
<span class="transposed_variable">username.</span><span class="transposed_variable">github.</span><span class="transposed_variable">com.</span>      <span class="number">43192</span>   IN      A       <span class="number">204.232</span><span class="number">.175</span><span class="number">.78</span>
</code></pre>
<h3>자동 리다이렉트</h3>

<p>커스텀 도메인을 세팅하면 서버는 자동으로 몇 가지 리다이렉트 기능을 제공한다.</p>

<ul>
<li>사용자 페이지에서는 <code>username.github.com</code> ⇒ <code>example.com</code></li>
<li>TDL에서는 <code>www.example.com</code> ⇒ <code>example.com</code></li>
<li>www 서브 도메인을 사용 중이라면 <code>example.com</code> ⇒ <code>www.example.com</code></li>
</ul>

<p><code>www</code> ⇔ TLD 리다이렉트가 동작하려면 TLD와 <code>www</code> 서브 도메인 DNS의 레코드가 페이지의 서버를 가리키고 있어야 한다.</p>

<blockquote>
<p><strong>알아둘 것</strong>: 사용자 페이지의 커스텀 도메인은 자체의 커스텀 도메인을 가진 프로젝트 페이지는 제외하고 그 계정 아래에 있는 모든 프로젝트 페이지를 같은 도메인으로 리다이렉트한다.</p>

<p><strong>경고</strong>: <code>http://username.github.com/projectname</code>과 같은 프로젝트 페이지의 서브 경로는 프로젝트의 커스텀 도메인으로 리다이렉트 되지 않는다.</p>
</blockquote>

<h3>실제 예제</h3>

<p><a href="http://github.com/mojombo/mojombo.github.com/">mojombo.github.com</a> 은 <a href="http://tom.preston-werner.com/">tom.preston-werner.com</a> 로 리다이렉트 된다. 커스텀 도메인은 <a href="https://github.com/mojombo/mojombo.github.com/blob/master/CNAME">이 파일</a>에 정의되어 있다.</p>

<h3>Troubleshooting</h3>

<p>커스텀 도메인 설정에 문제가 생기면 <a href="https://help.github.com/articles/my-custom-domain-isn-t-working">이 가이드</a>를 보면 된다.</p>

<h2>7. 커스텀 404 페이지</h2>

<p>404.html 파일을 저장소의 루트에 넣어두면 기존 404페이지 대신 저장소의 404.html 페이지를 보여준다. 404 페이지는 반드시 html 파일이어야 한다.</p>

<blockquote>
<p><strong>알아둘 것</strong>: 커스텀 404 페이지는 페이지 도메인의 루트에 존재해야만 작동한다. 커스텀 도메인을 사용하지 않는 프로젝트 페이지의 커스텀 404 페이지는 동작하지 않는다. (프로젝트 페이지는 루트도메인 외에 프로젝트 이름이 경로에 추가되므로)</p>
</blockquote>

<h3>실제 예제</h3>

<p><a href="http://github.com/tekkub/tekkub.github.com/blob/master/404.html">Tekkub의 404</a> 페이지는 <a href="http://tekkub.net/404.html">tekkub.net/404.html</a> 에서 볼 수 있다.</p>

<h2>8. 페이지가 안 보여요. &ldquo;unable to run Jekyll!&rdquo;</h2>

<p>가끔 페이지는 푸시 후에 빌드에 실패해서 &ldquo;unable to run jekyll&quot;이라는 에러를 내뱉을 때가 있다. 이 에러가 나올 수 있는 몇몇 원인을 알아보자.</p>

<h3>저수준 태그 에러</h3>

<p>Jekyll은 현재 저수준의 Liquid 태그에 대한 <a href="https://github.com/mojombo/jekyll/issues/425">이슈사항</a>이 있다. 만약 이 기능을 사용한다면 템플릿에 중괄호 등을 이스케이프 시킬 때는 HTML 이스케이프 시퀀스 같은 방법을 사용하는 등의 우회로를 찾아야 한다.</p>

<h3>안전하지 않은 플러그인</h3>

<p>페이지의 서버는 안전하다고 확인되지 않은 플러그인은 빌드하지 않는다. <code>_plugins</code>폴더에 있는 모든 플러그인 또한 이 규칙에 적용받는다.
이 문제는 두 가지 해결책이 존재한다.</p>

<ul>
<li>안전하지 않은 플러그인을 지운다. 또는</li>
<li>소스 파일 대신에 페이지를 로컬에서 빌드하고 그 결과 파일을 푸시한다.</li>
</ul>

<p>두 번째 해결책이 <a href="http://octopress.org/">Octopress</a>가 취하고 있는 전략이다.</p>

<h3>문법 에러</h3>

<p>때로 타이핑을 잘못 했다던가 하는 이유로 빌드가 실패하는 때도 있다. 이는 <a href="http://jekyllrb.com/">jekyll</a>을 로컬에서 <code>jekyll --safe</code>를 이용해 확실히 잡아야 한다. GitHub에서 사용하는 서버에서 사용하는 jekyll의 버전은 Jekyll과 페이지 섹션에서 알 수 있다.</p>

<h3>소스 세팅</h3>

<p>GitHub의 빌드 서버는 당신의 페이지를 빌드할 때 <code>source</code> 세팅을 덮어쓴다. 만약 당신이 이 세팅을 바꾼다면 페이지가 빌드되지 않을 수도 있다.</p>

<h2>9. 프로젝트 페이지 지우기</h2>

<p>프로젝트 페이지를 없애려면 <code>gh-pages</code> 브랜치를 지우면 된다.</p>
<pre><code>$ git push origin <span class="comment">--delete gh-pages</span>
<span class="operator"><span class="keyword">Delete</span> the gh-pages branch <span class="keyword">from</span> origin

<span class="keyword">To</span> https://github.com/username/repo.git
- [deleted]         gh-pages
</code></pre>
<h2>10. 브랜치 모델</h2>

<p>섹션 9 까지는 번역이었고, 10 부터는 dogfeet 블로그에서 사용하는 브랜치 모델에 대해서 설명하려 한다. 어렵지 않으나 중요하므로 얼른 하고 마치자.</p>

<h3>draft/* 브랜치</h3>

<p>모든 글은 각자 하나의 브랜치를 가진다. 이 글은 <code>draft/github-pages</code>라는 브랜치 위에서 작성 중이다. 이 블로그의 모든 글이 <code>draft/</code>라는 접미사를 가진 브랜치를 가지고 있었다. 각 글들은 자신의 브랜치 위에서 작성되고 다른 사람들과 공유하여 리뷰를 받는다. 추가돼야 할 내용이나 오타, 비문 등을 지적받고 다시 고친 뒤에 커밋 한다. 
글이 완성되면 저장용, 공유용 커밋들을 rebase를 이용해 합쳐서 1~2개의 커밋으로 정리한다. 이는 중앙 저장소의 히스토리를 예쁘게 유지하기 위함이다. 히스토리가 복잡해지면 같이 공유하는 사람에 대한 예의에 어긋난다. (&hellip;) 사람마다 다르겠지만 내 경우에 완전한 창작 글은 하나의 커밋으로 합치고 번역 글은 markdown으로 포메팅된 원문이 보존된 커밋 하나와 완성된 번역문 두 개로 정리한다.
정리가 다 되면 ready 브랜치로 합친다.</p>

<h3>ready 브랜치</h3>

<p>정리된 draft 브랜치는 ready 브랜치로 합친다. dogfeet은 완성된 글을 곧바로 퍼블리싱하지 않고 ready 브랜치에 먼저 저장한다. 그리고는 매 주마다 master 브랜치를 ready 브랜치로 fast-forwording하여 실제 웹페이지로 보이도록 발행한다. 저장은 merge나 rebase를 하는데 둘 중에 어떤 것을 할지는 <a href="/articles/2012/git-merge-rebase.html">이 글</a>을 참고 하길 바란다.</p>

<p>master 브랜치는 항상 fast-forwording만 한다.</p>

<h3>정리</h3>

<p>하나의 글을 퍼블리싱 하는 프로세스는 다음과 같다.</p>

<ol>
<li>master 브랜치에서 draft/<어쩌구 저쩌구> 라는 이름으로 새로운 브랜치를 딴다.</li>
<li>글을 쓰고 커밋을 정리한다. 필요에 따라 서로 리뷰를 부탁하기도 한다.</li>
<li>ready로 merge 하거나 rebase 시킨다.</li>
<li>ready 브랜치를 master 브랜치로 fast-forword 한다.</li>
</ol>
]]>
</content></entry><entry><title><![CDATA[ Git 인덱스 페이지 프로젝트 dogit ]]></title><link href="http://dogfeet.github.com/articles/2012/dogit.html" /><updated>2012-09-27T15:00:00.000Z</updated><id>http://dogfeet.github.com/articles/2012/dogit.html</id><content type="html"><![CDATA[
<p>프로젝트 <a href="http://dogfeet.github.com/dogit">dogit</a>(<code>두깃</code>으로 읽는다). Git과 관련된 자료를 일목요연하게 볼 수 있도록 Git 인덱스 페이지를 만들었다. 여기저기 흩어져 있는 자료를 후진 기억력에 의존해 찾으려니 매우 오래걸리고 귀찮았다. 한 번에 전부 설명할 수는 없지만, 한 페이지에서 키워드와 해당 자료의 링크를 넣어 두면 검색해서 찾아 보기 쉬울 것 같았다.</p>

<p><img src="http://dogfeet.github.com/articles/2012/dogit/index-html.png" alt="brownee"></p>

<p>좋은 자료가 있으면 알려주세요. 쉽게 검색할 수 있도록 간략한 소개나 키워드가 같이 있으면 좋습니다. 이 글의 댓글로 남겨주시거나 Pull Request를 보내 주시면 감사하겠습니다.</p>

<p>풍성하고 즐거운 추석 보내세요.</p>
]]>
</content></entry><entry><title><![CDATA[ Meteor: 스마트 패키지 매니저 "Meteorite" ]]></title><link href="http://dogfeet.github.com/articles/2012/meteor-meteorite.html" /><updated>2012-09-20T15:00:00.000Z</updated><id>http://dogfeet.github.com/articles/2012/meteor-meteorite.html</id><content type="html"><![CDATA[
<p><a href="https://github.com/oortcloud/meteorite">Meteorite</a>로 할 수 있는 일은 두 가지이다. 하나는 스마트 패키지를 관리하는 일이고 하나는 Meteor 앱을 관리하는 일이다. 이 글은 Meteor 앱을 관리하는 방법을 설명한다. 스마트 패키지를 관리하는 일은 다음에 정리하겠다.</p>

<p><a href="https://github.com/oortcloud/meteorite">Meteorite</a>는 <a href="http://meteor.com/">Meteor</a> 매니저이자 스마트 패키지 매니저다. meteor 명령을 감싸는 형태로 구현했기 때문에 <a href="https://github.com/oortcloud/meteorite">Meteorite</a>로도 Meteor 앱을 관리할 수 있다. 그리고 meteor 명령은 지원하지 않는 스마트 패키지를 설치/관리할 수도 있다. 게다가 스마트 패키지를 만들고 관리할 수도 있다. <a href="http://rubygems.org/">gem</a>, <a href="http://gembundler.com/">bundler</a>, <a href="https://rvm.io/">rvm</a>을 보고 만들었다고 한다.</p>

<p><img src="http://dogfeet.github.com/articles/2012/meteor/meteorite.png" alt="meteorite"></p>

<p><a href="https://github.com/oortcloud/meteorite">Meteorite</a>를 사용하면 사용할 meteor 버전을 명시할 수도 있고 스마트 패키지 의존성을 관리할 수 있다.</p>

<h2>설치하기</h2>
<pre><code class="lang-bash">npm install -g meteorite
</code></pre>
<h2>mrt 명령어</h2>

<p><a href="https://github.com/oortcloud/meteorite">Meteorite</a>의 명령어는 <code>mrt</code>이다. &lsquo;meteor create myapp'으로도 스케폴드 앱을 만들 수 있지만 <code>mrt</code> 명령으로도 앱을 만들 수 있다:</p>
<pre><code class="lang-bash">mrt create myapp
</code></pre>
<p><code>meteor</code> 명령으로 생성한 것과 거의 같지만 <code>mrt</code> 명령은 meteor 저장소의 master 브랜치를 기준으로 myapp으로 생성한다. 그리고 스마트 패키지 정보파일인 smart.json 파일에 그 정보를 기록한다:</p>
<pre><code class="lang-javascript">{
  <span class="string">"meteor"</span>: {
    <span class="string">"git"</span>: <span class="string">"https://github.com/meteor/meteor.git"</span>,
    <span class="string">"branch"</span>: <span class="string">"master"</span>
  },
  <span class="string">"packages"</span>: {}
}
</code></pre>
<p><code>mrt create</code> 명령에는 <code>--branch</code>, <code>--tag</code>, <code>--ref</code> 옵션이 있어서 원하는 meteor 버전을 명시할 수 있다. </p>

<p>그리고 다음과 같이 실행한다. 아무 옵션없이 <code>mrt</code>를 실행하면 <code>mrt run</code>를 실행한 것과 같고 기본포트는 <code>meteor</code> 명령처럼 3000이다:</p>
<pre><code class="lang-bash">mrt run --port 2222
</code></pre>
<h2>smart.json</h2>

<p><code>smart.json</code>은 npm의 <code>package.json</code> 처럼 스마트 패키지 정보를 기술하는 파일이다. </p>
<pre><code class="lang-javascript">{
  <span class="comment">//meteor는 생략할 수 있다.</span>
  <span class="comment">//생략할 경우 Meteor의 공식 저장소와 master 브랜치가 사용된다.</span>
  <span class="comment">//meteor.branch와 meteor.git 설정은 다른 브랜치를 사용할 때 쓴다.</span>
  <span class="string">"meteor"</span>: { 
    <span class="string">"branch"</span>: <span class="string">"devel"</span>
  },
  <span class="comment">//packages에 명시한 패키지는 기본적으로 중앙저장소(atmosphere)에서</span>
  <span class="comment">//다운로드한다. 여기서는 moment와 fork-me를 다운로드한다.</span>
  <span class="string">"packages"</span>: {
    <span class="string">"moment"</span>: <span class="string">"1.7.0"</span>,
    <span class="string">"fork-me"</span>: {
      <span class="string">"version"</span>: <span class="string">"0.0.1"</span>
    },
    <span class="string">"cool-tool"</span>: {
      <span class="comment">//atmosphere가 아니라 git 저장소에서 패키지를 가져온다.</span>
      <span class="string">"git"</span>: <span class="string">"https://github.com/possibilities/cool-tool.git"</span>,
      <span class="comment">//해당 태그의 버전을 가져온다.</span>
      <span class="string">"tag"</span>: <span class="string">"v0.0.2"</span>
      <span class="comment">//branch도 된다.</span>
      <span class="string">"branch"</span>: <span class="string">"master"</span>
      <span class="comment">//ref도 된다.</span>
      <span class="string">"ref"</span>: <span class="string">"a137a5eee5"</span>
    },
    <span class="string">"another-tool"</span>: {
      <span class="comment">//atmosphere가 아니라 git 저장소에서 패키지를 가져온다.</span>
      <span class="string">"git"</span>: <span class="string">"https://github.com/possibilities/another-tool.git"</span>
    },
    <span class="string">"test-package"</span>: {
      <span class="comment">//로컬 디스크에 있는 패키지를 가져온다.</span>
      <span class="string">"path"</span>: <span class="string">"/path/to/local/package"</span>
    }
  }
}
</code></pre>
<ul>
<li><p>smart.json 파일에는 저장소 이외에 다른 정보는 기입하지 않아도 된다. mrt는 저장소에 있는 package.js 파일을 찾고 해당 Meteor 버전에 맞는 패키지를 다운로드해서 설치한다.</p></li>
<li><p>명시한 스마트 패키지들에 서로 의존관계가 있으면 <code>mrt</code>가 적당히 정렬해서 설치한다. 상호 의존성이 있어도 잘 설치한다.</p></li>
<li><p><code>mrt</code>가 처음 실행되면 smart.lock 파일이 생성된다. 이 파일에는 사용하는 패키지 버전이 들어간다. 다음에 실행할 때 참고하기 때문에 매우 유용하다. smart.lock 파일을 저장소에 커밋해 두면 그 저장소를 클론한 다른 개발자도 원 개발자가 사용하는 버전이 무었인지 알 수 있다. 그리고 smart.json 파일이 수정되면 자동으로 새 버전으로 업데이트 한다. 다음은 smart.lock 샘플이다:</p></li>
</ul>
<pre><code class="lang-javascript">{
  <span class="string">"meteor"</span>: {
    <span class="string">"git"</span>: <span class="string">"https://github.com/meteor/meteor.git"</span>,
    <span class="string">"branch"</span>: <span class="string">"devel"</span>,
    <span class="string">"commit"</span>: <span class="string">"de413efe500174999211eff318ad65eb34794d74"</span>
  },
  <span class="string">"dependencies"</span>: {
    <span class="string">"basePackages"</span>: {
      <span class="string">"moment"</span>: {},
      <span class="string">"groups"</span>: {}
    },
    <span class="string">"packages"</span>: {
      <span class="string">"moment"</span>: {
        <span class="string">"git"</span>: <span class="string">"https://github.com/possibilities/meteor-moment.git"</span>,
        <span class="string">"tag"</span>: <span class="string">"v1.7.0"</span>,
        <span class="string">"commit"</span>: <span class="string">"c64b6ec0e714b9556f4b6643d430b868ba69d3d7"</span>
      },
      <span class="string">"groups"</span>: {
        <span class="string">"git"</span>: <span class="string">"https://github.com/possibilities/meteor-groups.git"</span>,
        <span class="string">"tag"</span>: <span class="string">"v0.0.6"</span>,
        <span class="string">"commit"</span>: <span class="string">"ee45c3fbdb84313f6f0124ed30e02e101d3829cb"</span>
      }
    }
  }
}
</code></pre>
<p><code>mrt install</code>이라고 실행하면 Meteor는 실행하지 않고 패키지만 설치한다.</p>

<p><code>smart.lock</code> 파일을 날려버리고서 <code>mrt update</code> 명령을 실행하면 패키지를 전부 업데이트할 수 있다. <code>mrt update PACKAGE_NAME</code> 처럼 패키지 이름을 입력하면 그 패키지만 업데이트된다.</p>

<h2>Atmosphere</h2>

<p><a href="https://github.com/oortcloud/meteorite">Meteorite</a>는 스마트 패키지용 중앙 저장소를 사용하는데 이 저장소가 <a href="https://atmosphere.meteor.com/wtf/package">Atmosphere</a>이다. </p>

<p>다음과 같이 <a href="https://atmosphere.meteor.com/wtf/package">Atmosphere</a>에 있는 패키지는 설치한다:</p>
<pre><code><span class="comment">mrt</span> <span class="comment">add</span> <span class="comment">moment</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">version</span> <span class="comment">1</span>.<span class="comment">6</span>.<span class="comment">2</span>
</code></pre>
<p>'버전은 생략할 수 있다.'라고 메뉴얼에서 설명하는데 저 옵션은 제대로 동작하는 것인지 모르겠다. 생략도 가능하다. <code>mrt help add</code> 명령을 실행했을 때 나오는 설명도 없고 아직 먼가 부실하다.</p>

<p><code>mrt list</code> 명령을 실행하면 현재 사용할 수 있는 패키지를 보여준다. <code>meteor list</code>과 기본적으로 같지만 mrt 명령으로 설치한 스마트 패키지도 보여진다. 아직 설치하지 않은 <a href="https://atmosphere.meteor.com/wtf/package">Atmosphere</a>에 있는 패키지도 조회할 수 있으면 좋을 것 같은데 아직 그런 명령어는 없다. 현재 사용하고 있는 패키지는 smart.json을 봐야한다. <code>mrt list</code> 명령의 결과는 다음과 같다:</p>
<pre><code>absolute-url      DEPRECATED: Generate absolute URLs pointing <span class="keyword">to</span> the application
amplify           Cross browser API <span class="keyword">for</span> Persistant Storage, PubSub <span class="keyword">and</span> Request.
autopublish       Automatically publish all data <span class="keyword">in</span> the database <span class="keyword">to</span> every client
backbone          A minimalist client-side MVC framework
bootstrap         UX/UI framework from Twitter
code-prettify     Syntax highlighting <span class="keyword">of</span> code, from Google
coffeescript      Javascript dialect <span class="keyword">with</span> fewer braces <span class="keyword">and</span> semicolons
email             Send email messages
force-ssl         Require this application always use transport layer encryption
groups            Simple system <span class="keyword">for</span> groups
handlebars        Simple semantic templating language
htmljs            Easy macros <span class="keyword">for</span> generating DOM elements <span class="keyword">in</span> Javascript
http              Make HTTP calls <span class="keyword">to</span> remote servers
jquery            Manipulate the DOM using CSS selectors
jquery-history    pushState module from the jQuery project
jquery-layout     Easily create arbitrary multicolumn layouts
jquery-waypoints  Execute a <span class="function"><span class="keyword">function</span> <span class="title">when</span> <span class="title">the</span> <span class="title">user</span> <span class="title">scrolls</span> <span class="title">past</span> <span class="title">an</span> <span class="title">element</span>
<span class="title">less</span>              <span class="title">The</span> <span class="title">dynamic</span> <span class="title">stylesheet</span> <span class="title">language</span>.
<span class="title">madewith</span>          <span class="title">Made</span> <span class="title">With</span> <span class="title">Meteor</span> <span class="title">badge</span>
<span class="title">moment</span>            <span class="title">Moment</span>.<span class="title">js</span> <span class="title">packaged</span> <span class="title">for</span> <span class="title">Meteor</span>
<span class="title">sass</span>              <span class="title">Sassy</span> <span class="title">CSS</span> <span class="title">pre</span>-<span class="title">processor</span>.
<span class="title">showdown</span>          <span class="title">Markdown</span>-<span class="title">to</span>-<span class="title">HTML</span> <span class="title">processor</span>
<span class="title">spiderable</span>        <span class="title">Makes</span> <span class="title">the</span> <span class="title">application</span> <span class="title">crawlable</span> <span class="title">to</span> <span class="title">web</span> <span class="title">spiders</span>.
<span class="title">stylus</span>            <span class="title">Expressive</span>, <span class="title">dynamic</span>, <span class="title">robust</span> <span class="title">CSS</span>.
<span class="title">underscore</span>        <span class="title">Collection</span> <span class="title">of</span> <span class="title">small</span> <span class="title">helper</span> <span class="title">functions</span> <span class="params">(map, each, bind, ...)</span>
</code></pre>
<p><code>mrt remote moment</code>라고 실행하면 moment 패키지가 삭제된다. mrt 명령 사용방법은 <code>mrt help</code>를 실행하면 볼 수 있다. 세부 명령어 사용법은 <code>mrt help [command]</code>라고 실행하면 볼 수 있다.</p>

<p>지금까지 mrt 명령으로 앱을 관리하는 방법을 살펴보았다. 다음에는 스마트 패키지를 만드는 법을 살펴보겠다. 기대하시라.</p>
]]>
</content></entry></feed>